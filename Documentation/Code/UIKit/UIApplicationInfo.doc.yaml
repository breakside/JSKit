copyright: Copyright Â© 2020 Breakside Inc.
name: UIApplication Info
introduced: 2020.1.0
kind: dictionary
summary: A file of application properties
description: |
  The application's `Info` file is a YAML or JSON dictionary that contains
  properties instructing the `UIApplication` on how to initialize.

  The file should be named either `Info.yaml` or `Info.json` and placed at the
  root of the application's project.

  Among other things, the `Info` file
  - Indicates the application type
  - Uniquely identifies the application
  - Provides a application title
  - Lists the application version
  - Defines the acceptable `JSArguments` that can be passed to
    `applicationDidFinishLaunching()`
  - Declares the default font
  - Points to main spec file or application delgate class
  - Points to the application's icon

  Some of these values are used by the build system when packaging an
  application.  For example, the `JSBundleVersion` is used to tag the
  Docker image that is created for non-debug builds.
topics:
  -
    name: Identification
    members:
      -
        name: JSBundleType
        type: String
        summary: The type of project
        description: |
          Must be `html` for web based `UIApplication`s.
      -
        name: JSBundleIdentifier
        type: String
        summary: The globally unique identifier for the application
        description: |
          A bundle identifier should be globally unique, so the use of a
          reverse-domain syntax is strongly encouraged.

          For example, the identifier for this documentation viewer is
          ````
          io.breakside.JSKit.DocViewer
          ````
      -
        name: JSBundleVersion
        type: String
        summary: A series of dot-separated integers representing the
          applications current production version
        description: |
          The version number is used by the build system for such things as
          tagging the Docker image, so it's important to keep the number
          up to date when building production builds.

          While no exact convention is defined, we recommend using a
          Major.Minor.Bufix style version number.
  -
    name: Application Delegate
    members:
      -
        name: UIMainSpec
        type: String
        summary: The name of the spec that returns a `UIApplicationDelegate` as
          its `File's Owner`
        description: |
          ````
          UIMainSpec: MainWindow
          ````

          The main spec typically defines a UI in addition to the application
          delegate, but is required to return via its `File's Owner` property
          an instance of a class that implements the
          `UIApplicationDelegate`(UIApplication.UIApplicationDelegate)
          protocol.

          If you'd prefer not to use a spec file, you can specify the
          application delegate class via `UIApplicationDelegate`
        note: When providing a spec name, the `.spec.yaml` file extensions
          are implied and should not be included.
      -
        name: UIMainSpec
        suffix: collection
        type: dictionary
        summary: The names of the specs that return a `UIApplicationDelegate` as
          their `File's Owner`, corresponding to different device types
        description: |
          In this form of `UIMainSpec`, you can include variations of
          your user interface for different device types.

          ````
          UIMainSpec:
            default: MainWindow
            touch:   MainWindowTouch
          ````

          Rather than use screen size as the main differentiator between
          devices, we use the primary mode of input, which has a larger effect
          on the UI than the screen size.  For example, a tablet screen is
          comparable to a laptop screen in terms of size, but the tablet should
          have a touch-friendly interface rather than a mouse-friendly
          interface.

          To adapt each UI to various screen sizes, you can use the
          `UITraitCollection` properties on `UIView` and `UIViewController`.

          Properites
          ==========

          - `default`() - The spec to use for precice pointer-based devices such
            as laptops or desktops
          - `touch`() - The spec to use for coarse touch-based devices such as
            phones or tablets

          `default`() will be used for any device that is not primarily a touch
          device. For example, laptops and desktops are primarily mouse/cursor
          based devices with a precice pointer, not touch devices.

          Touch-capable laptops will still use `default`() because they are
          *primarily* mouse based devices.

          `touch`() will be used for any device that is primarily a touch device.
          For example, phones and tablets are touch based devices.

          Stylus-capable phones and tablets may have precice pointing ability,
          but will still use `touch`() because they are *primarily* touch based
          devices with a stylus as a secondary input method.

          The value for each property is the name of a spec file.

          The main spec typically defines a UI in addition to the application
          delegate, but is required to return via its `File's Owner` property
          an instance of a class that implements the
          `UIApplicationDelegate`(UIApplication.UIApplicationDelegate)
          protocol.

          If you'd prefer not to use a spec file, you can specify the
          application delegate class via `UIApplicationDelegate`
        note: When providing a spec name, the `.spec.yaml` file
          extensions are implied and should not be included.
        see:
          - UIDevice
          - UIUserInterface
          - UITraitCollection
      -
        name: UIApplicationDelegate
        type: String
        summary: The name of a class that should be instantiated as the
          \`UIApplication`'s `delegate`(UIApplication.delegate)
        description:
          An application is required to have a `delegate`(UIApplication.delegate)
          that implements the `UIApplicationDelegate`(UIApplication.UIApplicationDelegate)
          protocol.

          When specified as a class name here, the `UIApplication` will
          instantiate an object of that class to act as its delegate.

          You can alternatively supply a delegate by using `UIMainSpec`
  -
    name: Title and Icon
    members:
      -
        name: UIApplicationTitle
        type: String
        summary: A localizable string that will be displayed as the application's
          title
        description: |
          For a web based `UIApplication`, the title will be used as the HTML
          document's title.
      -
        name: UIApplicationIcon
        type: String
        summary: The name of an image resource to use as the application's icon
        description: |
          An icon image resouce is often an `.imageset` collection of `.png`
          images at `1x`, `2x`, and `3x` resolution.

          For web based `UIApplication`s, the builder will add the icon
          specified here as a favicon for the HTML page.
        note: When specifying an image resource, don't any any file extension
          like `.imageset` or `.png`.  The `JSBundle` resource system will
          find the best option from the file's basename alone.
  -
    name: Launch Options
    members:
      -
        name: UIApplicationLaunchOptions
        type: dictionary
        summary: The definitions of aguments that can be provided at launch
          time.
        description: |
          The value is a `dictionary` that matches what can be passed to
          `JSArguments.initWithOptions()`.

          Each key is a string representing an agument name, and each value
          is a `JSArguments.Option` dictionary.

          For web based applications, the launch options are extracted from
          the `fragment`(JSURL.fragment) of the page's URL.
  -
    name: Language Support
    members:
      -
        name: JSDevelopmentLanguage
        type: String
        summary: A language identifier that will be used as a final option
          if none of the user's preferred languages are supported by the app.
  -
    name: Fonts
    members:
      -
        name: UIApplicationSystemFont
        type: String
        summary: The name of a font resource to use as the default for UI
          elements
        description: |
          `UIKit` applications don't assume that any font is available without
          it being included in the application.

          Every application must include at least one font and specify here
          what the default font name is.

          Use the resource name corresponding to the font file, which is the
          font's filename excluding any extension.
  -
    name: HTML-Specific Options
    members:
      -
        name: HTTPPort
        type: Number
        summary: The default port to configure the application's static server on
      -
        name: HTTPWorkerCount
        type: Number
        summary: The default number of nginx workers to configure
      -
        name: UIApplicationHTMLIndexFile
        type: String
        summary: The name of the single page app html file
        description: |
          Defaults to `"index.html"`
      -
        name: UIApplicationHTMLServiceWorkerFile
        type: String
        summary: The name of the service worker script
        description: |
          Defaults to `"service-worker.js"`
      -
        name: DockerOwner
        type: String
        summary: A name to use as a prefix when creating docker image names
      -
        name: HMTLManifestConfiguration
        type: String
        summary: A list of files that map entries from the www folder to
          alternate names that should be used in the application manifest
        description: |
          Used with advanced http server configuration, like when .html
          URLs are mapped to their files basename without the .html part.
      -
        name: HTMLProductionEnvironment
        type: String
        summary: The name of a file with environment variables that will be used
          for non-debug builds.
        description:
          Defaults to `production.env`.

          Typically the production environment file is committed to version
          control.

          For debug builds, a git-ignored `.env` file in the working directory
          will be used by default, allowing each developer to have custom
          settings.