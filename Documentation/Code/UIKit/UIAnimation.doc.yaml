copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: 2020.1.0
inherits: JSObject
summary: The abstract base class for `UIKit` animations
description: |
  Concrete base classes such as `UIPropertyAnimation` are built on top of this
  base class that only defines the abstract interface for animation objects.

  You typically won't need to deal with these kind of animation classes directly,
  as they are created implicitly by `UILayer`.

  Higher level animators like `UIViewPropertyAnimator` are easier to use.
topics:
  -
    name: Updating
    members:
      -
        name: updateForTime
        kind: method
        summary: Update the animation for the given timestamp
        arguments:
          -
            name: time
            type: Number
            summary: The global time in seconds kept by the display server
        description: |
          Called by the display system on every frame to udpate the animation

          The time provided is only useful as a comparison to a previous time
          and does not represent any calendar time.
      -
        name: percentComplete
        type: Number
        summary: How far the animation is along its duration
        description: |
          You can set the percent complete at any time to skip around in the
          animation.
        see:
          - pause
          - resume
          - reverse
      -
        name: pause
        kind: method
        summary: Pause the animation at its current point
        description: |
          The animation will stay frozen at the current point until a
          balancing `resume()` is called.
        note: |
          `pause()` and `resume()` calls can be nested.  Only the outermost
          `resume()` call will actually resume the animation.
      -
        name: resume
        kind: method
        summary: Resume the animation from its current point
        description: |
          Called to balance a previous `pause()` call.
        note: |
          `pause()` and `resume()` calls can be nested.  Only the outermost
          `resume()` call will actually resume the animation.
      -
        name: reverse
        kind: method
        summary: Reverse the animation from its current point back to its
          original starting point.
      -
        name: isComplete
        type: boolean
        summary: Indicates the animation is complete
      -
        name: completionFunction
        type: function
        summary: The function to call when the animation completes
  -
    name: Timing Functions
    members:
      -
        name: Timing
        kind: enum
        summary: The predefined timing functions available for animations
        description: |
          Anywhere a timing function is required, you can either:

          1. Use one of these predefined functions
          2. Define your own function

          Custom Timing Functions
          -----------------------
          You can define your own timing function by creating a `function`
          that takes a number from `0` to `1` and returns any number, although
          the returned number shouldn't stray too far from the `0` to `1` range.

          ````
          function linearTimingFunction(x){
            return x;
          }

          function stepTimingFunction(x){
            return Math.floor(x * 10) / 10;
          }
          ````
        topics:
          -
            name: Options
            members:
              -
                name: linear
                summary: Makes animations appear to move at a constant velocity
              -
                name: easeIn
                summary: Starts off slower and speeds up
              -
                name: easeOut
                summary: Starts off normal and slows down at the end
              -
                name: easeInOut
                summary: Starts off slow and ends slow, but speeds up in the middle
              -
                name: bounds
                summary: Appears mostly linear, but bounces at the end by
                  overshooting the final value breifly before returning there
              -
                name: cubicBezier
                kind: enumfunction
                summary: Creates a timing function based on a  cubic bezier that
                  has a starting point at `(0,0)`, ending point at `(1,1)`, and
                  control points as specified.
                arguments:
                  -
                    name: controlPoint1
                    type: JSPoint
                    summary: A point in unit-space that defines the position of
                      the cubic bezier's first control point
                  -
                    name: controlPoint2
                    type: JSPoint
                    summary: A point in unit-space that defines the position of
                      the cubic bezier's second control point