copyright: Copyright Â© 2020 Breakside Inc.
kind: framework
environment: html
summary: Create desktop-quality applications on the web
description: |
  `UIKit` is designed to
  - Feel like coding an application instead of a DOM document
  - Provide a toolkit of UI elements to build desktop-quality applications

  If you're familiar with iOS or macOS programming, `UIKit` will feel familiar.
  However, it is not intended to be a Cocoa clone.  The language differences
  between Objective-C/Swift and Javascript, combined with the browser
  environment at times demand unqiue classes and behaviors.  Some names and
  concepts may be similar, but others will be distinct.

  View Controllers
  ===============
  `UIKit` is designed to facilitate Model-View-Controller (MVC) programming.

  The glue between the model and view is the `UIViewController`, which populates
  views from model data and updates model data based on user interaction
  with views.

  [Binding](Binding) data models to views through a controller continues
  this MVC style, but elimites the need for a lot of "glue code" in the
  controller because bindings pass the data automatically between model and
  view.

  Views & Windows
  ===============
  At the heart of `UIKit` are views, represented by the `UIView` class.  Views
  are rectangles in which you can draw to the screen.

  In `UIKit` a window is special kind of view, represetned by `UIWindow`, that
  starts a related tree of views.  A list of windows provide the root of all
  views drawn to the screen.  Windows can be layered, moved, and resized.
  Windows can also contain controls like toolbars in the form of `UIToolbar`.

  Underneath each view is a layer, represented by `UILayer`.  Many view
  properties such as `bounds`, `position`, and `backgroundColor` all pass
  straight through from a view to its underlying layer.

  The biggest distinction between views and layers is that views receive events
  from the user such as a mouse click, keyboard input, or a touch.  Layers do
  not.  Layers are best suited for drawing only use cases where the overhead
  of a view's event processing is unecessary or negatively affects performance.

  Event System
  ============
  Even though `UIKit` ultimately builds a web application, it does not expose
  the DOM event model.

  Instead, `UIKit` defines an entirely new event model that works better for
  application concepts like views, striving to do the right thing with the
  least amount of code.

  `UIEvent`s are generated by low-level managers and sent to the running
  `UIApplication`, which inspects the event and typically forwards it to
  the relevant `UIWindow`, which inspects the event and typically forwards it
  to the relevant `UIView`.  At each step, the event may be intercepted for
  special purposes, like when `UIApplication` recognizes keyboard shortcuts
  for its `mainMenu` and forwards them to the menu rather than to a window.

  Events are ultimately routed to a `UIResponder`, but not necessarily in the
  same manner as typical DOM events.  For example, `UIKit` will route mouse
  movement and mouse up events to the `UIView` that initially responded to the
  mouse down event, regardless of which view the cursor is currently over.

  In addition, the `UIKit` event system makes it easy to implement rich
  drag and drop with custom pasteboard contents.

  For a deeper dive into the event system and the motivations behind it,
  see [Why Not Use DOM Events?](WhyNotUseDOM).

  Animations
  ==========
  Animations is another area that `UIKit` strives to get right in way that
  works well with highly dynamic applications.

  In a web app you might expect to use CSS Animations, but since `UIKit` doesn't
  rely on CSS files to define styles, it makes little sense to build on the CSS
  Animations features.

  Furthermore, the delcarative nature of CSS Animations is great for simple
  use cases, but becomes a burden for more advanced and interactive use cases.

  `UIViewPropertyAnimator`, which is built on the core `UIAnimation` system, is
  a great way to integrate meaningful animations into your UI.

  Performance
  ===========
  `UIKit` aims to provide UI elements that perform great even in the face of
  large data sets.

  An example of this is `UIListView`, which shows a vertical list of items.

  Often in web application programming, large lists lead to performance
  nightmares.  The two ways of solving the issue don't lead to the best UIs.

  - Paging the list burdens the user with having to click next and previous
    instead of just scrolling
  - Infinite scrolling shows misleading scroll bars and often doesn't load
    in time, leading to scroll-stop-scroll experiences

  `UIListView` solves the problem the way desktop applications do: by drawing
  only the views that are visible and recycling them as the user scrolls.  This
  allows for large lists that scroll correctly and quickly because the size
  of the list only affects the size of the scrollbars, not how many UI elements
  get created.

  Text Editing
  ============
  Browser based text editing is either limited to rich text or wide open to any
  html pasted in a `contenteditable` `div`.

  In `UIKit`, the text input system has been designed with `JSAttributedString`
  and `UITextInput` to allow for:
  - Any level of rich text you want
  - Trival extraction of plain text
  - Custom attributes on rich text
  - A `UITokenField` that turn input into "tokens" that act as single characters,
    like is often found in the To and CC fields of an email composer.
  - Total control over input

  All of this is possible while still maintaining compatbility with the user's
  input expectations such as keyboard shortcuts.
topics:
  -
    name: Applications
    members:
      - WebAppOrganization
      - UIApplication
      - UIState
      - UIPlatform
  -
    name: Events
    summary: An event system designed for applications with complex user interaction
    members:
      - WhyNotUseDOM
      - UIResponder
      - UIEvent
      - UITouch
  -
    name: Layers, Views, & Windows
    members:
      - UILayer
      - UIView
      - UIViewController
      - UIWindow
      - UIWindowController
      - UIToolbar
      - UIToolbarItem
      - UIScene
      - UIScreen
      - UICursor
  -
    name: Animations
    members:
      - UIViewPropertyAnimator
      - UIAnimationTransaction
      - UIAnimation
      - UIBasicAnimation
      - UIPropertyAnimation
  -
    name: Controls
    members:
      - UIControl
      - UIButton
      - UIPopupButton
      - UICheckbox
      - UIRadioGroup
      - UIRadioButton
      - UISegmentedControl
  -
    name: Text Controls
    members:
      - UILabel
      - UITextField
      - UITokenField
      #- UITextEditor
      - UITextInput
      #- UITextAttachmentView
      - UITextLayer
  -
    name: Image Views
    members:
      - UIImageView
      - UIImageLayer
  -
    name: Scrolling
    members:
      - UIScrollView
      - UIScroller
  -
    name: List Views
    members:
      - UIListView
      - UIListViewCell
      - UIListViewHeaderFooterView
      - UIListViewController
      - UIOutlineView
      - UIOutlineViewCell
      #- UIBrowserView
      #- UIBrowserViewController
      - UIStackView
  -
    name: Tab Views
    members:
      - UITabView
      - UITabViewItem
      - UITabViewController
  -
    name: Pasteboard & Dragging
    members:
      - UIPasteboard
      - UIDraggingSession
      - UIDraggingSource
      - UIDraggingDestination
      - UIDragOperation
      - UIDragItem
  -
    name: Alerts & Dialogs
    members:
      - UIAlertAtion
      - UIAlertController
      - UIOpenPanel
      - UISavePanel
      - UIPopupWindow
  -
    name: Activity & Progress
    members:
      - UIActivityIndicatorView
      - UIProgressIndicatorView
  -
    name: Menus
    members:
      - UIMenu
      - UIMenuItem
      - UIMenuBar
      - UIMenuView
  -
    name: Paned Views
    members:
      - UIDualPaneViewController
  -
    name: Web Views
    members:
      - UIWebView