copyright: Copyright Â© 2020 Breakside Inc.
kind: class
inherits: UIScrollView
summary: Display and interact with a vertical list of items
description: |
  A `UIListView` is one of the most versatile componets of `UIKit`, and it
  makes use of several key concepts found throughout `UIKit`.

  How a List View Gets Its Data
  =========
  The delegate and data source pattern is used often in `UIKit` as a way
  to separate generic control behaviors from an application's specific data.

  In the case of a `UIListView`, the `delegate` and `dataSource` combine to
  1. Populate the list's cells
  2. Respond to user interaction with cells

  Typically, your `delegate` and `dataSource` are the same controller object,
  often a subclass of `UIListViewController`.  Anything that implements the
  `UIListViewDelegate` and `UIListViewDataSource` protocols will do.

  The important delegate methods are:
  1. `cellForListViewAtIndexPath()`, which creates a cell for the list view to
     display.
  2. `listViewDidSelectCellAtIndexPath()`, which is called when a user clicks a
     cell

  The important data source methods are:
  1. `numberOfSectionsInListView()`
  2. `numberOfRowsInListViewSection()`

  which, when combined, tell the list view how many items are included.

  Reusing Cells
  ==========
  Very long lists would cause perforance issues if `UIListView` created a view
  for each cell in the entire list.

  Instead, `UIListView` creates only those cells that are visible in its scroll
  window.  As the user scrolls, cells that become invisible can be reused for
  cells that become visible.

  Typically you'll register cell classes with `registerCellClassForReuseIdentifier()`,
  when creating the list view.

  Then, when the list view calls for `cellForListViewAtIndexPath()`, your
  delegate asks for a reusable cell with `dequeueReusableCellWithIdentifier()`,
  which will either return a reusable cell or create a new one if none are
  available for reuse.
topics:
  -
    name: Creating a List View
    members:
      -
        name: initWithStyler
        kind: init
        summary: Create a list view with the given styler
        arguments:
          -
            name: styler
            type: UIListViewStyler
            summary: The styler to use for this list view
      -
        name: Spec File Properties
        kind: spec
        summary: The properties available for `UIListView`s defined in spec
          files
        topics:
          -
            name: Delegate & Data Source
            members:
              -
                name: delegate
                type: UIListViewDelegate
                summary: The delegate object for this list view
                description: |
                  A list view's delegate is responsible for creating cells,
                  responding to user interaction, and otherwise filling in
                  application-specific logic that `UIListView` can't assume.

                  See the `UIListViewDelegate` documentation for more
                  information about implementing the delegate protocol.
                note: Often the object that acts as a list view's `delegate`
                  also acts as its `dataSource`.
              -
                name: dataSource
                type: UIListViewDataSource
                summary: The data source object for this list view
                description: |
                   A list view's data source is required for every list view.

                   It provides the basic information about how many sections
                   and rows are in the list view.

                   The list view uses this information to calculate its size
                   without having to draw all of its cells.  As the user
                   scrolls, the list view asks its `delegate` for cells
                   that are in the visible area.
                note: Often the object that acts as a list view's `dataSource`
                  also acts as its `delegate`.
          -
            name: Styling
            members:
              -
                name: styler
                type: UIListViewStyler
                summary: The styler to use for this list view
          -
            name: Cell Sizing
            members:
              -
                name: rowHeight
                type: Number
                summary: The height to use for all rows
                description: |
                  If you need to use different heights for different rows, you
                  need to implement the `heightForListViewRowAtIndexPath()` 
                  `delegate` method.
          -
            name: Cell Reuse
            members:
              -
                name: reusableCellClasses
                type: dictionary
                summary: Specifies which cell classes should be used for
                  which reuse identifiers
                description: |
                  The keys in this dictionary are the reuse identifiers.

                  The values can be either:
                  1. A `String` of the cell's class name
                  2. A `CellReuseInfo` dictionary

                  The cell's class should be `UIListViewCell` or one of its
                  subclasses.  Typically you'll create custom subclasses for
                  cells.

                  The short for simply maps an identifier to a class name.

                  ````
                  ViewController:
                    class: PlanetsViewController
                    view: /PlanetListView

                  PlanetListView:
                    class: UIListView
                    reusableCellClasses:
                      planet: PlanetCellView
                  ````

                  In your list view delegate, you'll call
                  `dequeueReusableCellWithIdentifier()` using the `"planet"`
                  identifier from the spec file:
                  ````
                  JSClass("PlanetsViewController", "UIListViewController", {

                    cellForListViewAtIndexPath: function(listView, indexPath){
                      var cell = listView.dequeueReusableCellWithIdentifier("planet", indexPath);
                      // cell is an instance of PlanetCellView
                      // ... configure cell as needed
                      return cell;
                    }

                  });
                  ````

                  The longer form allows you to override the styler used for cells
                  with this identifier.

                  ````
                  ViewController:
                    class: PlanetsViewController
                    view: /PlanetListView

                  PlanetListView:
                    class: UIListView
                    reusableCellClasses:
                      planet:
                        className: PlanetCellView
                        styler:
                          class: UListViewDefaultStyler
                          cellFont:
                            size: detail
                            weight: bold
                  ````
              -
                name: CellReuseInfo
                type: dictionary
                topics:
                  -
                    name: Properties
                    members:
                      -
                        name: className
                        type: String
                        summary: The name of the `UIListViewCell` subclass to
                          create when using the given identifier.
                      -
                        name: styler
                        type: UIListViewStyler
                        summary: The styler to use for cells created using
                          the given identifier.
          -
            name: Header & Footer Sizing
            members:
              -
                name: headerHeight
                type: Number
                summary: The height to use for all headers
                description: |
                  If you need to use different heights for different headers,
                  you need to implement the `heightForListViewHeaderInSection()` 
                  `delegate` method.
              -
                name: footerHeight
                type: Number
                summary: The height to use for all footers
                description: |
                  If you need to use different heights for different footers,
                  you need to implement the `heightForListViewFooterInSection()` 
                  `delegate` method.
              -
                name: headersStickToTop
                type: boolean
                summary: Indicates that headers should stick at the top of the
                  view until their section has been completely scrolled by
          -
            name: Header & Footer Reuse
            members:
              -
                name: reusableHeaderFooterClasses
                type: dictionary
                summary: Specifies which header and footer classes should be
                  used for which reuse identifiers
                description: |
                  The keys in this dictionary are the reuse identifiers.

                  The values are `String`s representing class names.

                  The cell's class should be `UIListViewHeaderFooterView` or one
                  of its subclasses.  Often you'll create custom subclasses
                  for headers and footers.

                  The dictionary simply maps an identifier to a class name.

                  ````
                  ViewController:
                    class: PlanetsViewController
                    view: /PlanetListView

                  PlanetListView:
                    class: UIListView
                    reusableHeaderFooterClasses:
                      header: PlanetsHeaderView
                  ````

                  In your list view delegate, you'll call
                  `dequeueReusableHeaderWithIdentifier()` using the `"header"`
                  identifier from the spec file:
                  ````
                  JSClass("PlanetsViewController", "UIListViewController", {

                    headerViewForListViewSection: function(listView, indexPath){
                      var header = listView.dequeueReusableHeaderWithIdentifier("header");
                      // header is an instance of PlanetsHeaderView
                      // ... configure cell as needed
                      return header;
                    }

                  });
                  ````
          -
            name: Selection
            members:
              -
                name: allowsMultipleSelection
                type: boolean
                summary: Indicates that the user can select multiple rows at a
                  time
  -
    name: Delegate & Data Source
    members:
      -
        name: UIListViewDelegate
        kind: protocol
        summary: The interface a list view delegate implements
        description: |
          The list view's delegate is what populates the rows and responds to
          user interaction.

          While not all methods are required to implement, you'll need to at
          least implement `cellForListViewAtIndexPath()` to proide cell views
          to the list view.

          To respond to user interaction, you'll need to implement methods
          like `listViewShouldSelectCellAtIndexPath()` and
          `listViewDidSelectCellAtIndexPath()`.

          The list view's `dataSource` is in charge of telling the list view
          how many sections and rows there are.
        topics:
          -
            name: Cells
            members:
              -
                name: cellForListViewAtIndexPath
                summary: Get the cell for the given index path
                type: UIListViewCell
                return: A cell to display at the given index path
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  This the primary function that populates list views.

                  If you've called `registerCellClassForReuseIdentifier()` when
                  creating the list view, then you'll call
                  `dequeueReusableCellWithIdentifier()` in this method.

                  ````
                  JSClass("PlanetsViewController", UIListViewController, {

                    init: function(){
                      PlanetsViewController.$super.init.call(this);
                      this.planets = [
                        {
                          name: "Mercury",
                          image: JSImage.initWithResourceName("MercuryIcon")
                        },
                        {
                          name: "Venus",
                          image: JSImage.initWithResourceName("VenusIcon")
                        },
                        {
                          name: "Earth",
                          image: JSImage.initWithResourceName("EarthIcon")
                        }
                        // ...
                      ]
                    },

                    viewDidLoad: function(){
                      PlanetsViewController.$super.viewDidLoad.call(this);
                      this.listView.registerCellClassForReuseIdentifier('planet', UITableViewCell);
                    },

                    cellForListViewAtIndexPath: function(listView, indexPath){
                      var cell = listView.dequeueReusableCellWithIdentifier('planet', indexPath);
                      var planet = this.planets[indexPath.row];
                      cell.titleLabel.text = planet.name;
                      cell.imageView.image = planet.image;
                      return cell;
                    }

                  });
                  ````
              -
                name: heightForListViewRowAtIndexPath
                summary: Get the exact height for a row
                type: Number
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  Implement this method if you need different heights for
                  different rows in your list.

                  Also be sure to implement `estimatedHeightForListViewRows()`,
                  which will ensure the list view can run efficiently.
              -
                name: estimatedHeightForListViewRows
                summary: Get an estimated height for all rows in the list view
                type: Number
                return: A good estimate or average of how tall rows are
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                description: |
                  Implement this method along with
                  `heightForListViewRowAtIndexPath()` in order to provide
                  different heights for different rows, but still run
                  efficiently.

                  When the list first loads, the estimated height is used
                  to quickly calculate the full height of the list view.

                  As the user scrolls and individual rows become visible,
                  `heightForListViewRowAtIndexPath()` is called and the
                  overall list view height is subtly adjusted.
          -
            name: Headers & Footers
            members:
              -
                name: headerViewForListViewSection
                summary: Get the header view for the section
                type: UIListViewHeaderFooterView
                nullable: true
                return: The header view
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: section
                    type: Number
                    summary: The section for the header
                description: |
                  If you've called `registerHeaderFooterClassForReuseIdentifier()`
                  when creating the list view, then you'll call
                  `dequeueReusableHeaderWithIdentifier()` in this method.

                  ````
                  JSClass("PlanetsViewController", UIListViewController, {

                    init: function(){
                      PlanetsViewController.$super.init.call(this);
                      this.solarSystems = [
                        {
                          name: 'Sol',
                          planets: [
                            {
                              name: "Mercury",
                              image: JSImage.initWithResourceName("MercuryIcon")
                            },
                            {
                              name: "Venus",
                              image: JSImage.initWithResourceName("VenusIcon")
                            },
                            {
                              name: "Earth",
                              image: JSImage.initWithResourceName("EarthIcon")
                            }
                            // ...
                          ]
                        },
                        // ...
                      ];
                    },

                    numberOfSectionsInListView: function(listView){
                      return this.solarSystems.length;
                    }

                    numberOfRowsInListViewSection: function(listView, section){
                      var styem = this.solarSystems[section];
                      return system.planets.length;
                    }

                    viewDidLoad: function(){
                      PlanetsViewController.$super.viewDidLoad.call(this);
                      this.listView.registerHeaderFooterClassForReuseIdentifier('solar-system', UIListViewHeaderFooterView);
                    },

                    headerViewForListViewSection: function(listView, section){
                      var header = listView.dequeueReusableHeaderWithIdentifier('solar-system');
                      var system = this.solarSystems[section];
                      header.titleLabel.text = system.name;
                      return header;
                    }

                  });
                  ````
              -
                name: footerViewForListViewSection
                summary: Get the footer for the section
                type: UIListViewHeaderFooterView
                return: The footer for the section
                nullable: true
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: section
                    type: Number
                    summary: The section for the foote
                description: |
                  If you've called `registerHeaderFooterClassForReuseIdentifier()`
                  when creating the list view, then you'll call
                  `dequeueReusableFooterWithIdentifier()` in this method.

                  ````
                  JSClass("PlanetsViewController", UIListViewController, {

                    init: function(){
                      PlanetsViewController.$super.init.call(this);
                      this.solarSystems = [
                        {
                          name: 'Sol',
                          planets: [
                            {
                              name: "Mercury",
                              image: JSImage.initWithResourceName("MercuryIcon")
                            },
                            {
                              name: "Venus",
                              image: JSImage.initWithResourceName("VenusIcon")
                            },
                            {
                              name: "Earth",
                              image: JSImage.initWithResourceName("EarthIcon")
                            }
                            // ...
                          ]
                        },
                        // ...
                      ];
                    },

                    numberOfSectionsInListView: function(listView){
                      return this.solarSystems.length;
                    }

                    numberOfRowsInListViewSection: function(listView, section){
                      var styem = this.solarSystems[section];
                      return system.planets.length;
                    }

                    viewDidLoad: function(){
                      PlanetsViewController.$super.viewDidLoad.call(this);
                      this.listView.registerHeaderFooterClassForReuseIdentifier('solar-header', UIListViewHeaderFooterView);
                      this.listView.registerHeaderFooterClassForReuseIdentifier('solar-footer', UIListViewHeaderFooterView);
                    },

                    headerViewForListViewSection: function(listView, section){
                      var header = listView.dequeueReusableHeaderWithIdentifier('solar-header');
                      var system = this.solarSystems[section];
                      header.titleLabel.text = system.name;
                      return header;
                    },

                    footerViewForListViewSection: function(listView, section){
                      var footer = listView.dequeueReusableHeaderWithIdentifier('solar-footer');
                      var system = this.solarSystems[section];
                      footer.titleLabel.text = "%d planets total".sprintf(system.planets.length);
                      return footer;
                    }

                  });
                  ````
              -
                name: heightForListViewHeaderInSection
                summary: Get the height for the header in a section
                type: Number
                return: The exact height for the header.  Use `0` to indicate
                  no header exists for the section.
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: section
                    type: Number
                    summary: The section for the header
              -
                name: heightForListViewFooterInSection
                summary: Get the height for the footer in a section
                type: Number
                return: The exact height for the footer.  Use `0` to indicate
                  no footer exists for the section.
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: section
                    type: Number
                    summary: The section for the header

          -
            name: Selection
            members:
              -
                name: listViewShouldSelectCellAtIndexPath
                type: boolean
                return: |
                  `true` if the cell can be selected, `false` otherwise
                summary: Indicates if a cell can be selected by the user
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
              -
                name: listViewDidSelectCellAtIndexPath
                summary: Called whent the user selects a cell
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  Typically this is the call that triggers an action like
                  navigating to a new screen.

                  Selection occurs when the user performs a mouse down.

                  If you need to perform an action on mouse up, see
                  `listViewDidFinishSelectingCellAtIndexPath()`
                note: |
                  This is called when the user selects a single row.
                  If you need to monitor multiple selection, use
                  `listViewSelectionDidChange()`.
              -
                name: listViewDidFinishSelectingCellAtIndexPath
                summary: Called when the selection is done, typically on
                  mouseUp
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  Certain actions only make sense if the user has released
                  the mouse.
                note: This method is not typically used because most actions
                  should happen on `listViewDidSelectCellAtIndexPath()`
              -
                name: listViewDidOpenCellAtIndexPath
                summary: Called when the user performs an action like double
                  click or the enter key
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  Distict from cell selection is the concept that the user
                  did an action typically associated with opening a resource.

                  Double click and Enter key are both considered open events.
              -
                name: listViewSelectionDidChange
                summary: 
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: selectedIndexPaths
                    type: JSIndexPath[]
                    summary: The currently selected index paths
                description: |
                  Called when the selection changes.

                  While `listViewDidSelectCellAtIndexPath()` is useful for
                  single-selection lists, this method is more appropriate for
                  lists that allow mutliple selection.
                see:
                  - allowsMultipleSelection
          -
            name: Context menu
            members:
              -
                name: menuForListViewCellAtIndexPath
                type: UIMenu
                nullable: true
                return: The context menu to show for the cell
                summary: Get the context menu for the cell
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  A context menu can be requested by an action such as a
                  right click
          -
            name: Dragging cells
            members:
              -
                name: listViewShouldDragCellAtIndexPath
                type: boolean
                summary: Indicate if a cell can be dragged as copy/paste data
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  If you return `true`, expect a subsequent call to
                  `pasteboardItemsForListViewAtIndexPath()` to get the
                  pasteboard representation of the cell.
              -
                name: pasteboardItemsForListViewAtIndexPath
                type: UIDraggingItem[]
                summary: Get the data items that correspond to the item at the
                  index path
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The location of the cell in the list
                description: |
                  The items will be added to a `UIDraggingSession` and placed
                  on the session's `pasteboard`(UIDraggingSession.pasteboard).
              -
                name: listViewWillBeginDraggingSession
                summary: Called when the list view is about to begin a dragging
                  session
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: session
                    type: UIDraggingSession
                    summary: The dragging session
                description: |
                  Gives the delgate an opportunity to configure the session.

                  For example, the delegate can set the session's
                  `image`(UIDraggingSession.image).
      -
        name: UIListViewDataSource
        kind: protocol
        summary: An interface that's used to tell the list view how many sections
          and rows to display.
        description: |
          A data source must be implemented for every list view.

          After obtaining the size of the list from its `dataSource`, the list
          view will turn to its `delegate` for specifics about drawing and
          user interaction.
        topics:
          -
            name: List Size
            members:
              -
                name: numberOfSectionsInListView
                type: Number
                summary: Get the number of sections in the list view
                arguments: 
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
              -
                name: numberOfRowsInListViewSection
                type: Number
                summary: The number of rows in the given section
                arguments: 
                  -
                    name: listView
                    type: UIListView
                    summary: The list view making the call
                  -
                    name: section
                    type: Number
                    summary: The section to consider when counting rows

      -
        name: delegate
        type: UIListViewDelegate
        summary: The delegate object for this list view
        description: |
          A list view's delegate is responsible for creating cells,
          responding to user interaction, and otherwise filling in
          application-specific logic that `UIListView` can't assume.

          See the `UIListViewDelegate` documentation for more
          information about implementing the delegate protocol.
        note: Often the object that acts as a list view's `delegate`
          also acts as its `dataSource`.
        see:
          - UIListViewController
      -
        name: dataSource
        type: UIListViewDataSource
        summary: The data source object for this list view
        description: |
           A list view's data source is required for every list view.

           It provides the basic information about how many sections
           and rows are in the list view.

           The list view uses this information to calculate its size
           without having to draw all of its cells.  As the user
           scrolls, the list view asks its `delegate` for cells
           that are in the visible area.
        note: Often the object that acts as a list view's `dataSource`
          also acts as its `delegate`.
        see:
          - UIListViewController
  -
    name: Styling
    members:
      -
        name: UIListViewStyler
        kind: class
        inherits: JSObject
        summary: The abstract base class for all list view stylers
        topics:
          -
            name: Initializing List Views
            members:
              - 
                name: initializeListView
                kind: method
                summary: Called when a list view is created
                arguments:
                  -
                    name: listView
                    type: UIListView
                    summary: The list view being created
                description: |
                  Gives the styler an opportunity to configure the list view
          -
            name: Initializing Cells 
            members:
              - 
                name: initializeCell
                kind: method
                summary: Called when a list view cell is created
                arguments:
                  -
                    name: cell
                    type: UIListViewCell
                    summary: The cell being created
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The index path of the cell
                description: |
                  Gives the styler an opportunity to configure the cell
          -
            name: Updating Cells
            members:
              -
                name: updateCell
                kind: method
                summary: Called when a cell's state changes
                arguments:
                  -
                    name: cell
                    type: UIListViewCell
                    summary: The cell being updated
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The index path of the cell
                description: |
                  Gives the styler an opportunity to configure the cell for its
                  new state
          -
            name: Cell Layout
            members:
              -
                name: layoutCell
                kind: method
                summary: Called when a cell needs to layout its subviews
                arguments:
                  -
                    name: cell
                    type: UIListViewCell
                    summary: The cell to layout
                  -
                    name: indexPath
                    type: JSIndexPath
                    summary: The index path of the cell
                description: |
                  Gives the styler an opportunity to layout the cell
          -
            name: Initializing Headers & Footers 
            members:
              - 
                name: initializeHeader
                kind: method
                summary: Called when a list view header is created
                arguments:
                  -
                    name: header
                    type: UIListViewHeaderFooterView
                    summary: The header being created
                  -
                    name: section
                    type: Number
                    summary: The section of the header
                description: |
                  Gives the styler an opportunity to configure the header
              - 
                name: initializeFooter
                kind: method
                summary: Called when a list view footer is created
                arguments:
                  -
                    name: footer
                    type: UIListViewHeaderFooterView
                    summary: The footer being created
                  -
                    name: section
                    type: Number
                    summary: The section of the footer
                description: |
                  Gives the styler an opportunity to configure the footer
      -
        name: UIListViewDefaultStyler
        kind: class
        inherits: UIListViewStyler
        summary: The default list view styler for `UIKit`
        topics:
          -
            name: Creating a Styler
            members:
              -
                name: Spec File Properties
                kind: spec
                summary: The properties available for a list view styler in a
                  spec file
                topics:
                  -
                    name: Cell Text
                    members:
                      -
                        name: cellFont
                        type: JSFont
                        summary: The font to use for the cell's
                          \`titleLabel`(UIListViewCell.titleLabel)
                      -
                        name: cellTextColor
                        type: JSColor
                        summary: The color to use for the cell's
                          \`titleLabel`(UIListViewCell.titleLabel)
                      -
                        name: selectedCellTextColor
                        type: JSColor
                        summary: The color to use for the cell's
                          \`titleLabel`(UIListViewCell.titleLabel) when the cell
                          is selected
                      -
                        name: mutedSelectedCellTextColor
                        type: JSColor
                        summary: The color to use for the cell's
                          \`titleLabel`(UIListViewCell.titleLabel) when the cell
                          is selected but the list view is not the first
                          responder of the application's main window.
                  -
                    name: Cell Detail Text
                    members:
                      -
                        name: cellDetailFont
                        type: JSFont
                        summary: The font to use for the cell's
                          \`detailLabel`(UIListViewCell.detailLabel)
                      -
                        name: cellDetailTextColor
                        type: JSColor
                        summary: The color to use for the cell's
                          \`detailLabel`(UIListViewCell.detailLabel)
                      -
                        name: selectedCellDetailTextColor
                        type: JSColor
                        summary: The color to use for the cell's
                          \`detailLabel`(UIListViewCell.detailLabel) when the
                          cell is selected
                      -
                        name: mutedSelectedCellDetailTextColor
                        type: JSColor
                        summary: The color to use for the cell's
                          \`detailLabel`(UIListViewCell.detailLabel) when the
                          cell is selected but the list view is not the first
                          responder of the application's main window.
                  -
                    name: Cell Content
                    members:
                      -
                        name: cellContentInsets
                        type: JSInsets
                        summary: The amount to inset the cell's content from
                          the cell's edges
                      -
                        name: cellContentCornerRadius
                        type: Number
                        summary: The amount to round the corners of the cell's
                          \`contentView`
                  -
                    name: Headers
                    members:
                      -
                        name: headerTextColor
                        type: JSColor
                        summary: The color for header text
                      -
                        name: headerBackgroundColor
                        type: JSColor
                        summary: The background color for header views
                      -
                        name: headerBorderColor
                        type: JSColor
                        summary: The border color for header views
                  -
                    name: Background
                    members:
                      -
                        name: cellBackgroundColor
                        type: JSColor
                        summary: The background color of the cell
                      -
                        name: selectedCellBackgroundColor
                        type: JSColor
                        summary: The background color of the cell when it is selected
                      -
                        name: mutedSelectedCellBackgroundColor
                        type: JSColor
                        summary: The background color of the cell when it is
                          selected but the list view is not the first responder
                          of the application's main window.
                  -
                    name: Image
                    members:
                      -
                        name: imageSize
                        type: JSSize
                        summary: The size of the cell's image
                  -
                    name: Accessory
                    members:
                      -
                        name: accessorySize
                        type: JSSize
                        summary: The size of the cell's accessory
                      -
                        name: accessoryColor
                        type: JSColor
                        summary: The color to use for the accessory when it
                          is a template image
                  -
                    name: Separators
                    members:
                      -
                        name: showSeparators
                        type: boolean
                        summary: Whether or not to show separators between cells
                      -
                        name: separatorInsets
                        type: JSInsets
                        summary: The amount to inset the separator line from
                          the cell's edges
                        description: |
                          ````
                          ListStyler:
                            class: UIListViewDefaultStyler
                            separatorInsets: 0,10,0,0
                          ````

                          Makes the insets `10` on the left and `0` on the right
                          
                          See `JSInsets`(JSInsets.Spec File Properties) for 
                          description of the various ways insets can be
                          specified.
                        important: Only the `left` and `right` insets will be
                          used.  The `top` and `bottom` insets can be anything,
                          but we recommend setting them to `0`.
                      -
                        name: cellSeparatorColor
                        type: JSColor
                        summary: The color of the separator line between cells
                      -
                        name: selectedCellSeparatorColor
                        type: JSColor
                        summary: The color of the separator line between cells
                          when a cell is selected
                      -
                        name: mutedSelectedCellSeparatorColor
                        type: JSColor
                        summary: The color of the separator line between cells
                          when a cell is selected but the list view is not the
                          first responder of the application's main window.
                  -
                    name: Context Selection
                    members:
                      -
                        name: contextSelectedCellBorderColor
                        type: JSColor
                        summary: The color of the cell's border shown when
                          the cell is context-selected
                        description: |
                          Context selection happens when the user right clicks.

                          The default styler draws a border inside the cell to
                          indicate context selection.
          -
            name: Cell Text
            members:
              -
                name: cellFont
                type: JSFont
                summary: The font to use for the cell's
                  \`titleLabel`(UIListViewCell.titleLabel)
              -
                name: cellTextColor
                type: JSColor
                summary: The color to use for the cell's
                  \`titleLabel`(UIListViewCell.titleLabel)
              -
                name: selectedCellTextColor
                type: JSColor
                summary: The color to use for the cell's
                  \`titleLabel`(UIListViewCell.titleLabel) when the cell
                  is selected
              -
                name: mutedSelectedCellTextColor
                type: JSColor
                summary: The color to use for the cell's
                  \`titleLabel`(UIListViewCell.titleLabel) when the cell
                  is selected but the list view is not the first
                  responder of the application's main window.
          -
            name: Cell Detail Text
            members:
              -
                name: cellDetailFont
                type: JSFont
                summary: The font to use for the cell's
                  \`detailLabel`(UIListViewCell.detailLabel)
              -
                name: cellDetailTextColor
                type: JSColor
                summary: The color to use for the cell's
                  \`detailLabel`(UIListViewCell.detailLabel)
              -
                name: selectedCellDetailTextColor
                type: JSColor
                summary: The color to use for the cell's
                  \`detailLabel`(UIListViewCell.detailLabel) when the
                  cell is selected
              -
                name: mutedSelectedCellDetailTextColor
                type: JSColor
                summary: The color to use for the cell's
                  \`detailLabel`(UIListViewCell.detailLabel) when the
                  cell is selected but the list view is not the first
                  responder of the application's main window.
          -
            name: Cell Content
            members:
              -
                name: cellContentInsets
                type: JSInsets
                summary: The amount to inset the cell's content from
                  the cell's edges
              -
                name: cellContentCornerRadius
                type: Number
                summary: The amount to round the corners of the cell's
                  \`contentView`
          -
            name: Headers
            members:
              -
                name: headerTextColor
                type: JSColor
                summary: The color for header text
              -
                name: headerBackgroundColor
                type: JSColor
                summary: The background color for header views
              -
                name: headerBorderColor
                type: JSColor
                summary: The border color for header views
          -
            name: Background
            members:
              -
                name: cellBackgroundColor
                type: JSColor
                summary: The background color of the cell
              -
                name: selectedCellBackgroundColor
                type: JSColor
                summary: The background color of the cell when it is selected
              -
                name: mutedSelectedCellBackgroundColor
                type: JSColor
                summary: The background color of the cell when it is
                  selected but the list view is not the first responder
                  of the application's main window.
          -
            name: Image
            members:
              -
                name: imageSize
                type: JSSize
                summary: The size of the cell's image
          -
            name: Accessory
            members:
              -
                name: accessorySize
                type: JSSize
                summary: The size of the cell's accessory
              -
                name: accessoryColor
                type: JSColor
                summary: The color to use for the accessory when it
                  is a template image
          -
            name: Separators
            members:
              -
                name: showSeparators
                type: boolean
                summary: Whether or not to show separators between cells
              -
                name: separatorInsets
                type: JSInsets
                summary: The amount to inset the separator line from
                  the cell's edges
                description: |
                  ````
                  ListStyler:
                    class: UIListViewDefaultStyler
                    separatorInsets: 0,10,0,0
                  ````

                  Makes the insets `10` on the left and `0` on the right
                  
                  See `JSInsets`(JSInsets.Spec File Properties) for 
                  description of the various ways insets can be
                  specified.
                important: Only the `left` and `right` insets will be
                  used.  The `top` and `bottom` insets can be anything,
                  but we recommend setting them to `0`.
              -
                name: cellSeparatorColor
                type: JSColor
                summary: The color of the separator line between cells
              -
                name: selectedCellSeparatorColor
                type: JSColor
                summary: The color of the separator line between cells
                  when a cell is selected
              -
                name: mutedSelectedCellSeparatorColor
                type: JSColor
                summary: The color of the separator line between cells
                  when a cell is selected but the list view is not the
                  first responder of the application's main window.
          -
            name: Context Selection
            members:
              -
                name: contextSelectedCellBorderColor
                type: JSColor
                summary: The color of the cell's border shown when
                  the cell is context-selected
                description: |
                  Context selection happens when the user right clicks.

                  The default styler draws a border inside the cell to
                  indicate context selection.
      -
        name: Styler
        kind: enum
        suffix: enum
        type: UIListViewStyler
        summary: The default styler instances created by `UIListView`
        description: |
          You can override the `default` option with a styler of your choosing,
          typically during `applicationDidFinishLaunching()`.
        options:
          -
            name: default
            summary: The default `UIKit` list view styler
      -
        name: styler
        type: UIListViewStyler
        summary: The styler in use for this list view
        description: |
          Stylers allow for separation between the list view's model and its
          presentation.

          One styler can be resused for many list views of the same type.

          `UIListViewStyler` is provided as an abstract base class for subclasses
          to extend into specific stylers for their needs.
      -
        name: stylerProperties
        type: dictionary
        summary: A dictionary that a styler can use to store properties
          relating to styling
        description: |
          Often a styler will need to create views or layers to help its
          styling.  Since a single styler is used for multiple list views,
          the styler can't store those view-specific properties on its own.

          So, `stylerProperties` is a place on each `UIListView` that a styler
          can store control-specific objects.
  -
    name: Cell Sizing
  -
    name: Cell Reuse
  -
    name: Accessing Cells
  -
    name: Header & Footer Sizing
  -
    name: Header & Footer Reuse
  -
    name: Loading List Data
  -
    name: List Editing
  -
    name: Selection
  -
    name: Scrolling