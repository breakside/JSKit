copyright: Copyright Â© 2020 Breakside Inc.
kind: protocol
introduced: 2021.10.0
summary: Protocol for database-storable objects
description: |
  Defines an interface your classes can adopt for database saving and loading.

  The simplest `DBStorable` is a JSON-compatible dictionary with an `id` property.

  For more complex classes, you should implement the `initFromStorableDictionary()`
  and `encodeToStorableDictionary()` methods to convert your class's data from/to
  a JSON-compatible dictionary.
topics:
  - name: Unique Identification
    members:
      - name: id
        kind: property
        type: String
        summary: A unique identifier for the object conforming to `DBID()` standards
        description: |
          Every object stored in a database must have an `id` property that
          conforms to the format generated by `DBID()`.
  - name: Dictionary Representation
    members:
      - name: initFromStorableDictionary
        kind: init
        type: dictionary
        summary: Create your object from a JSON-compatible dictionary that was
          read from an object database.
        arguments:
          - name: dictionary
            type: dictionary
            summary: The JSON-compatible dictionary to read plain properties from
        description: |
          Allows your class to decide which properties need to be stored,
          and which formats to use for non-storable types like `JSData`,
          `JSDate`, or references to custom classes.

          ````
          // #import DBKit
          "use strict";

          JSClass("Message", JSSObject, {

            id: null,
            data: null,
            senderID: null,
            created: null,

            initWithData: function(data, senderID){
              this.id = DBID("message");
              this.data = data;
              this.sender = senderID;
              this.created = JSDate.now;
            },

            initFromStorableDictionary: function(dictionary){
              this.data = dictionary.data.dataByDecodingBase64();
              this.created = JSDate.initWithTimeIntervalSince1970(dictionary.created);
              this.senderID = dictionary.senderID;
            },

            encodeToStorableDictionary: function(dictionary){
              dictionary.data = this.data.base64StringRepresentation();
              dictionary.created = this.created.timeIntervalSince1970;
              dictionary.senderID = this.senderID;
            }

          });
          ````

          If you are loading objects via a `DBObjectGraph`, add an implentation
          of `awakeInGraph()` to load references to other objects:

          ````
          // #import DBKit
          "use strict";

          JSClass("Message", JSSObject, {

            id: null,
            data: null,
            senderID: null,
            sender: null,
            created: null,

            initWithData: function(data, sender){
              this.id = DBID("message");
              this.data = data;
              this.sender = sender;
              this.senderID = sender.id;
              this.created = JSDate.now;
            },

            initFromStorableDictionary: function(dictionary){
              this.data = dictionary.data.dataByDecodingBase64();
              this.created = JSDate.initWithTimeIntervalSince1970(dictionary.created);
              this.senderID = dictionary.senderID;
            },

            encodeToStorableDictionary: function(dictionary){
              dictionary.data = this.data.base64StringRepresentation();
              dictionary.created = this.created.timeIntervalSince1970;
              dictionary.senderID = this.senderID;
            },

            awakeInGraph: async function(graph){
              this.sender = await graph.object(this.senderID);
            }

          });
          ````
      - name: encodeToStorableDictionary
        type: dictionary
        summary: Encode the properties of your object into a JSON-compatible dictionary
          that can be stored in an object database
        arguments:
          - name: dictionary
            type: dictionary
            summary: The JSON-compatible dictionary to write plain properties to
        description: |
          Allows your class to decide which properties need to be stored,
          and which formats to use for non-storable types like `JSData`,
          `JSDate`, or references to custom classes.

          ````
          // #import DBKit
          "use strict";

          JSClass("Message", JSSObject, {

            id: null,
            data: null,
            senderID: null,
            created: null,

            initWithData: function(data, senderID){
              this.id = DBID("message");
              this.data = data;
              this.senderID = senderID;
              this.created = JSDate.now;
            },

            initFromStorableDictionary: function(dictionary, graph){
              this.data = dictionary.data.dataByDecodingBase64();
              this.created = JSDate.initWithTimeIntervalSince1970(dictionary.created);
              this.senderID = dictionary.senderID;
            },

            encodeToStorableDictionary: function(dictionary){
              dictionary.data = this.data.base64StringRepresentation();
              dictionary.created = this.created.timeIntervalSince1970;
              dictionary.senderID = this.senderID;
            }

          });
          ````