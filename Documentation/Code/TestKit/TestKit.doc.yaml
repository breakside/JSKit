copyright: Copyright Â© 2020 Breakside Inc.
kind: framework
summary: Create and run automated tests of `JSKit` based code.
codeURL: Frameworks/TestKit/
description: |
  `TestKit` is a comprehensive automated test framework for any `JSKit` code
  including UI and Server-based code.

  Special Naming Conventions
  ==========
  Runnable `TKTestSuite` subclasses end with `"Tests"`, as in `"JSRectTests"`.

  Test cases, are any method or data-driven property on a suite that begins with
  `"test"`.

  For example, here's the start of the test suite for `JSRect`.
  ````
  #import Foundation
  #import TestKit
  'use strict';

  JSCass("JSRectTests", TKTestSuite, {

    testContructor: function(){
        var rect = new JSRect(1, 2, 3, 4);
        TKAssertEquals(rect.origin.x, 1);
        TKAssertEquals(rect.origin.y, 2);
        TKAssertEquals(rect.size.width, 3);
        TKAssertEquals(rect.size.height, 4);
    },

  });
  ````

  Data Driven Tests
  =======
  Data-driven tests are defined on `TKTestSuite` a property rather than a method.
  They are still recognized by their `"test"`() name prefix.

  A data driven test has two properties of its own: `inputs`() and `test`(),
  where `inputs`() is a map of names to arguments, and `test()` is a
  test function that takes the arguments.

  This allows you to use the same test function body with varying inputs
  without copying the test over and over again.

  ````
  JSClass("JSRectTests", TKTestSuite, {

    testContructor: {
      inputs: {
        positive: [1, 2, 3, 4],
        negative: [-1, -2, 3, 4],
        zero: [0, 0, 0, 0]
      },
      test: function(x, y, w, h){
        var rect = new JSRect(x, y, w, h);
        TKAssertEquals(rect.origin.x, x);
        TKAssertEquals(rect.origin.y, y);
        TKAssertEquals(rect.size.width, w);
        TKAssertEquals(rect.size.height, h);
    },

  });
  ````

  When the test suite runs, it will output results for each of the three inputs.

  Assertions
  ========

  Each test case should call one of the `TKAssert()` functions at least once.
  Often you'll have many assertions in a single test case.

  Asynchronous Tests
  ========

  Asynchronous tests are supported whenever a test case method returns a
  `Promise`, including when it is declared as an `async function`.

  Here's an example of testing the asynchronous `JSImage.getData()` method
  ````
  // #import Foundation
  // #import TestKit
  'use strict';

  JSClass("JSImageTests", TKTestSuite, {

      testResourceData: async function(){
          var image = JSImage.initWithResourceName('test');
          TKAssertNotNull(image);
          var data = await image.getData();
          TKAssertObjectEquals(data, [0x89,0x50, ... ]);
      }

  });
  ````

  Asynchronous Tests using TKExpectation
  ========

  Asynchronous tests are also supported by using `TKExpectation` and calling `wait()`
  on the suite.

  This is helpful when `async` methods are not allowed, perhaps because your
  tests needs to run an browser that doesn't support `async`

  Here's an example of testing the asynchronous `JSImage.getData()` method
  ````
  // #import Foundation
  // #import TestKit
  'use strict';

  JSClass("JSImageTests", TKTestSuite, {

      testResourceData: function(){
          var image = JSImage.initWithResourceName('test');
          TKAssertNotNull(image);

          var expectation = TKExpectation.init();
          expectation.call(image.getData, image, function(data){
              TKAssertNotNull(data);
              TKAssertObjectEquals(data, [0x89,0x50, ... ]);
          });

          this.wait(expectation, 2.0);
      }

  });
  ````
topics:
  -
    name: Test Suites
    members:
      - TKTestSuite
  -
    name: Asynchronous Tests
    members:
      - TKExpectation
  - 
    name: Assertions
    members:
      -
        name: TKAssert
        kind: function
        summary: Throws an exception if the condition is not strictly equal
          to `true`
        arguments:
          -
            name: condition
            type: boolean
            summary: The asserition condition
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          While this could be used for every test check, the other methods
          have common comparisons and yield better error message when they
          fail.
      -
        name: TKAssertEquals
        kind: function
        summary: Throws an exception if the two values are not equal
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `==` check passses.

          If you are dealing with objects, a better option is
          `TKAssertObjectEquals`, which calls the `isEqual()`() method
          of the result.

          If you are dealing with decimal numbers, a better option is
          `TKAssertFloatEquals`, which allows for small differences due to
          floating point rounding errors.
      -
        name: TKAssertNotEquals
        kind: function
        summary: Throws an exception if the two values are equal
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `!=` check passses.

          If you are dealing with objects, a better option is
          `TKAssertObjectNotEquals`, which calls the `isEqual()`() method
          of the result.
      -
        name: TKAssertFloatEquals
        kind: function
        summary: Throws an exception if the two values are not equal within
          a tolerance amount
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: threshold
            type: Number
            default: expected / 1000000
            summary: The allowed tolerance from the expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
      -
        name: TKAssertExactEquals
        kind: function
        summary: Throws an exception if the two values are not exactly equal
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `===` check passses.

          If you are dealing with objects, a better option is
          `TKAssertObjectEquals`, which calls the `isEqual()`() method
          of the result.

          If you are dealing with decimal numbers, a better option is
          `TKAssertFloatEquals`, which allows for small differences due to
          floating point rounding errors.
      -
        name: TKAssertNotExactEquals
        kind: function
        summary: Throws an exception if the two values are equal
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `!==` check passses.

          If you are dealing with objects, a better option is
          `TKAssertObjectNotEquals`, which calls the `isEqual()`() method
          of the result.
      -
        name: TKAssertObjectEquals
        kind: function
        summary: Throws an exception if the two object are not equal based
          on their `isEqual()`() implementation.
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Calls `!result.isEqual(expected)`.

          Fails if either value is `null` or `undefined`.
      -
        name: TKAssertObjectNotEquals
        kind: function
        summary: Throws an exception if the two values are equal
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Calls `result.isEqual(expected)`.

          Fails if either value is `null` or `undefined`.
      -
        name: TKAssertNotNull
        kind: function
        summary: Throws an exception if the given value is `null`
        arguments:
          -
            name: value
            type: any
            summary: The value to check
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
      -
        name: TKAssertNull
        kind: function
        summary: Throws an exception if the given value is not `null`
        arguments:
          -
            name: value
            type: any
            summary: The value to check
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
      -
        name: TKAssertNotUndefined
        kind: function
        summary: Throws an exception if the given value is `undefined`
        arguments:
          -
            name: value
            type: any
            summary: The value to check
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
      -
        name: TKAssertUndefined
        kind: function
        summary: Throws an exception if the given value is not `undefined`
        arguments:
          -
            name: value
            type: any
            summary: The value to check
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
      -
        name: TKAssertThrows
        kind: function
        summary: Throws an exception if the given function doesn't throw an
          exception
        arguments:
          -
            name: function
            type: function
            summary: A function that will be called
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
      -
        name: TKAssertLessThan
        kind: function
        summary: Throws an exception if the first value is greater than or
          equal to the second
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `result < expected` check passses.
      -
        name: TKAssertLessThanOrEquals
        kind: function
        summary: Throws an exception if the first value is greater than the
          second
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `result <= expected` check passses.
      -
        name: TKAssertGreaterThan
        kind: function
        summary: Throws an exception if the first value is less than or
          equal to the second
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `result > expected` check passses.
      -
        name: TKAssertGreaterThanOrEquals
        kind: function
        summary: Throws an exception if the first value is greater than
          the second
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Will not throw an exception if the `result >= expected` check passses.
      -
        name: TKAssertArrayEquals
        kind: function
        summary: Throws an exception if the two arrays differ
        arguments:
          -
            name: result
            type: any
            summary: The test value
          -
            name: expected
            type: any
            summary: The expected value
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Throws an exception if the two arrays have different lengths, or
          if any matching items are not exactly equal (`!==`)
      -
        introduced: 2020.28.0
        name: TKAssertType
        kind: function
        summary: Throws an exception if the given object's type does not match the expected type
        arguments:
          -
            name: obj
            type: any
            summary: The test value
          -
            name: expectedType
            type: String
            summary: The expected type
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Throws an exception if `typeof(obj)` != `expectedType`
      -
        introduced: 2021.7.1
        name: TKAssertInstance
        kind: function
        summary: Throws an exception if the given object is not an instance of the given type
        arguments:
          -
            name: obj
            type: any
            summary: The test value
          -
            name: expectedType
            type: Type
            summary: The expected type
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Throws an exception if `obj instanceof expectedType` is `false`
      -
        introduced: 2020.40.0
        name: TKAssertPromiseRejected
        kind: function
        type: Promise
        promise:
          resolve: Resolves if the given promise was rejected
        summary: Essentially reverses a promise result to test expected promise rejections
        arguments:
          -
            name: promise
            type: Promise
            summary: The promise to check for rejection
          -
            name: message
            type: String
            default: '""'
            summary: The error message to include in the exception
        description: |
          Only useful in `async` test methods to verify expected promise rejections

          ````
          #import TestKit
          "use strict";

          JSClass("MessageTests", TKTestSuite, {

            testMessageSendFailure: async function(){
              var message = Message.initWithText("hello, world!");
              message.send = function(){
                return new Promise(function(resolve, reject){
                  JSTimer.scheduledTimerWithInterval(0.1, function(){
                    reject(new Error("testing message send failure"));
                  })
                });x
              };
              await TKAssertPromiseRejected(messge.send());
            }

          })
          ````

          For non `async` test methods, use `TKExpectation` to perform asynchronous tests