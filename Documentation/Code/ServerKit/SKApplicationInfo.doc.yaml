copyright: Copyright Â© 2020 Breakside Inc.
name: SKApplication Info
introduced: 2020.1.0
kind: dictionary
summary: A file of application properties
description: |
  The application's `Info` file is a YAML or JSON dictionary that contains
  properties instructing the `SKApplication` on how to initialize.

  The file should be named either `Info.yaml` or `Info.json` and placed at the
  root of the application's project.

  Among other things, the `Info` file
  - Indicates the application type
  - Uniquely identifies the application
  - Provides an executable name
  - Lists the application version
  - Defines the acceptable `JSArguments` that can be passed to
    `applicationDidFinishLaunching()`
  - Points to main spec file or application delgate class

  Some of these values are used by the build system when packaging an
  application.  For example, the `JSBundleVersion` is used to tag the
  Docker image that is created for non-debug builds.
topics:
  -
    name: Identification
    members:
      -
        name: JSBundleType
        type: String
        summary: The type of project
        description: |
          Must be `node` for web based `SKApplication`s.
      -
        name: JSBundleIdentifier
        type: String
        summary: The globally unique identifier for the application
        description: |
          A bundle identifier should be globally unique, so the use of a
          reverse-domain syntax is strongly encouraged.

          For example, the identifier for this documentation viewer is
          ````
          io.breakside.JSKit.DocViewer
          ````
      -
        name: JSBundleVersion
        type: String
        summary: A series of dot-separated integers representing the
          applications current production version
        description: |
          The version number is used by the build system for such things as
          tagging the Docker image, so it's important to keep the number
          up to date when building production builds.

          While no exact convention is defined, we recommend using a
          Major.Minor.Bufix style version number.
  -
    name: Application Delegate
    members:
      -
        name: SKMainSpec
        type: String
        summary: The name of the spec that returns a `SKApplicationDelegate` as
          its `File's Owner`
        description: |
          The main spec typically defines an HTTP server in addition to the
          application delegate, but is required to return via its `File's Owner`
          property an instance of a class that implements the
          `SKApplicationDelegate`(SKApplication.SKApplicationDelegate) protocol.

          If you'd prefer not to use a spec file, you can specify the
          application delegate class via `SKApplicationDelegate`
        note: When providing a spec name, the `.spec.yaml` file extensions
          are implied and should not be included.
      -
        name: SKApplicationDelegate
        type: String
        summary: The name of a class that should be instantiated as the
          \`SKApplication`'s `delegate`(SKApplication.delegate)
        description:
          An application is required to have a `delegate`(SKApplication.delegate)
          that implements the `SKApplicationDelegate`(SKApplication.SKApplicationDelegate)
          protocol.

          When specified as a class name here, the `SKApplication` will
          instantiate an object of that class to act as its delegate.

          You can alternatively supply a delegate by using `SKMainSpec`
  -
    name: Executable Name
    members:
      -
        name: JSExecutableName
        type: String
        summary: The name to use for the executable build product
  -
    name: Launch Options
    members:
      -
        name: SKApplicationLaunchOptions
        type: dictionary
        summary: The definitions of aguments that can be provided at launch
          time.
        description: |
          The value is a `dictionary` that matches what can be passed to
          `JSArguments.initWithOptions()`.

          Each key is a string representing an agument name, and each value
          is a `JSArguments.Option` dictionary.

          For web based applications, the launch options are extracted from
          the `fragment`(JSURL.fragment) of the page's URL.
  -
    name: Language Support
    members:
      -
        name: JSDevelopmentLanguage
        type: String
        summary: A language identifier that will be used as a final option
          if none of the user's preferred languages are supported by the app.
  -
    name: Build Options
    members:
      -
        name: DockerOwner
        type: String
        summary: A name to use as a prefix when creating docker image names