copyright: Copyright Â© 2020 Breakside Inc.
introduced: 2020.1.0
kind: class
inherits: JSObject
summary: Represents an HTTP request from a client to an `HTTPServer`
description: |
  Requests are typically created by the internals of `HTTPServer` and then
  handed to a `SKHTTPResponder` for inspection.
topics:
  -
    name: Request Info
    members:
      -
        name: url
        type: JSURL
        summary: The URL of the request
        note: If no `"Host"` header was sent, this url will not contain
          host or scheme values.
        see:
          - origin
      -
        name: method
        type: String
        summary: The method of the request
        description: |
          `SKHTTPServer` automatically matches the request's method to
          a matching method on the `SKHTTPResponder` instance.
      -
        name: headerMap
        type: JSMIMEHeaderMap
        summary: The headers included in the request
      -
        name: origin
        type: String
        nullable: true
        summary: The value of the `"Origin"` header in the request
      -
        name: clientIPAddress
        type: JSIPAddress
        summary: The ip address of the client making the request
      -
        introduced: 2020.28.0
        name: tag
        type: String
        summary: A short unique identifier useful for tracking a request when logging
      -
        introduced: 2020.28.0
        name: receivedAt
        type: JSDate
        summary: The timestamp when the request was received
  -
    name: Request Body
    members:
      -
        name: contentType
        type: JSMediaType
        nullable: true
        summary: The content type of the request body
      -
        name: contentLength
        introduced: 2021.10.1
        type: Number
        nullable: true
        summary: The content length of the request body
      -
        name: maximumContentLength
        introduced: 2021.10.1
        type: Number
        summary: The maximum allowed content length
        description: |
          If the request body is larger than this length, an automatic response
          with `SKHTTPResponse.StatusCode.payloadTooLarge` will be sent;
      -
        name: getValidObject
        kind: method
        summary: Get an instance of the given class created with
          \`initWithValidatingObject()`
        arguments:
          -
            name: validatingContructionClass
            type: JSClass
            summary: The class of object to instantiate.  Must implement
              the `SKValidatingConstruction` protocol.
          -
            name: completion
            type:
              arguments:
                -
                  name: error
                  type: SKValidatingObject.Error
                  nullable: true
                  summary: The error, if the object could not be validated
                -
                  name: valid
                  type: JSObject
                  mullable: true
                  summary: The fully validated object, after being constructed
                    with the `SKValidatingObject` protocol's
                    `initWithValidatingObject()`
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          Creates an instance with all input validated via a
          `SKValidatingObject` passed to the init method.

          `getValidObject()` is the recommended way to create objects from user
          input in a request.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidObject(CommentRequest);
            }

          });

          JSClass("CommentRequest", JSObject, {

            text: null,
            replyToId: null,

            initWithValidatingObject: function(obj){
              this.text = obj.stringForKey('text');
              this.replyToId = obj.numberForKey('replyToId', null);
            }

          });
          ````

          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        name: getValidObject
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SKValidating
            summary: An instance of the given class
        summary: Get an instance of the given class created with
          \`initWithValidatingObject()`, returned via a promise
        arguments:
          -
            name: validatingContructionClass
            type: JSClass
            summary: The class of object to instantiate.  Must implement
              the `SKValidatingConstruction` protocol.
        description: |
          Creates an instance with all input validated via a
          `SKValidatingObject` passed to the init method.

          `getValidObject()` is the recommended way to create objects from user
          input in a request.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidObject(CommentRequest);
            }

          });

          JSClass("CommentRequest", JSObject, {

            text: null,
            replyToId: null,

            initWithValidatingObject: function(obj){
              this.text = obj.stringForKey('text');
              this.replyToId = obj.numberForKey('replyToId', null);
            }

          });
          ````

          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        introduced: 2020.28.0
        name: getValidForm
        kind: method
        summary: Get an instance of the given class created from a form body with
          \`initWithValidatingObject()`
        arguments:
          -
            name: validatingContructionClass
            type: JSClass
            summary: The class of object to instantiate.  Must implement
              the `SKValidatingConstruction` protocol.
          -
            name: completion
            type:
              arguments:
                -
                  name: error
                  type: SKValidatingObject.Error
                  nullable: true
                  summary: The error, if the object could not be validated
                -
                  name: valid
                  type: JSObject
                  mullable: true
                  summary: The fully validated object, after being constructed
                    with the `SKValidatingObject` protocol's
                    `initWithValidatingObject()`
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          Creates an instance with all input validated via a
          `SKValidatingObject` passed to the init method.

          `getValidForm()` is the recommended way to create objects from user
          input in a form request.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidForm(CommentRequest);
            }

          });

          JSClass("CommentRequest", JSObject, {

            text: null,
            replyToId: null,

            initWithValidatingObject: function(obj){
              this.text = obj.stringForKey('text');
              this.replyToId = obj.numberForKey('replyToId', null);
            }

          });
          ````

          In order to successfully decode a form object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/x-www-form-urlencoded"`
          2. Valid form data
      -
        introduced: 2020.28.0
        name: getValidForm
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SKValidating
            summary: An instance of the given class
        summary: Get an instance of the given class created from a form request with
          \`initWithValidatingObject()`, returned via a promise
        arguments:
          -
            name: validatingContructionClass
            type: JSClass
            summary: The class of object to instantiate.  Must implement
              the `SKValidatingConstruction` protocol.
        description: |
          Creates an instance with all input validated via a
          `SKValidatingObject` passed to the init method.

          `getValidForm()` is the recommended way to create objects from user
          input in a form request.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidForm(CommentRequest);
            }

          });

          JSClass("CommentRequest", JSObject, {

            text: null,
            replyToId: null,

            initWithValidatingObject: function(obj){
              this.text = obj.stringForKey('text');
              this.replyToId = obj.numberForKey('replyToId', null);
            }

          });
          ````

          In order to successfully decode a form object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/x-www-form-urlencoded"`
          2. Valid form data
      -
        name: getValidatingObject
        kind: method
        summary: Get the request's body as an validation-wrapped object decoded
          from JSON in a callback function
        arguments:
          -
            name: completion
            type:
              arguments:
                -
                  name: validator
                  type: SKValidatingObject
                  mullable: true
                  summary: The request's JSON body decoded into an object and
                    wrapped in a validator
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          A validating object provides a simple interface to extract user
          input while ensuring it meets input validation requirements.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidatingObject();
              var text = comment.stringForKey('text');
              var replyToId = comment.numberForKey('replyToId', null);
            }

          });
          ````

          Unless you need to extract fields at different times, we recommend
          using `getValidObject()` instead because it validates all the input
          upfront and allows for a more structured pattern to validate input.

          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        name: getValidatingObject
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SKValidatingObject
            summary: The request's body object wrapped in a validator
        summary: Get the request's body object wrapped in a validator with a promise
        description: |
          A validating object provides a simple interface to extract user
          input while ensuring it meets input validation requirements.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidatingObject();
              var text = comment.stringForKey('text');
              var replyToId = comment.numberForKey('replyToId', null);
            }

          });
          ````

          Unless you need to extract fields at different times, we recommend
          using `getValidObject()` instead because it validates all the input
          upfront and allows for a more structured pattern to validate input.

          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        introduced: 2020.28.0
        name: getValidatingForm
        kind: method
        summary: Get the request's body as an validation-wrapped object decoded
          from a form in a callback function
        arguments:
          -
            name: completion
            type:
              arguments:
                -
                  name: validator
                  type: SKValidatingObject
                  mullable: true
                  summary: The request's form body decoded into an object and
                    wrapped in a validator
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          A validating object provides a simple interface to extract user
          input while ensuring it meets input validation requirements.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidatingForm();
              var text = comment.stringForKey('text');
              var replyToId = comment.numberForKey('replyToId', null);
            }

          });
          ````

          Unless you need to extract fields at different times, we recommend
          using `getValidForm()` instead because it validates all the input
          upfront and allows for a more structured pattern to validate input.

          In order to successfully decode a form object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/x-www-form-urlencoded"`
          2. Valid form data
      -
        introduced: 2020.28.0
        name: getValidatingForm
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SKValidatingObject
            summary: The request's body form wrapped in a validator
        summary: Get the request's body form wrapped in a validator with a promise
        description: |
          A validating object provides a simple interface to extract user
          input while ensuring it meets input validation requirements.

          ````
          JSClass("CommentsResponder", SKHTTPResponder, {

            post: async function(){
              var comment = await this.request.getValidatingForm();
              var text = comment.stringForKey('text');
              var replyToId = comment.numberForKey('replyToId', null);
            }

          });
          ````

          Unless you need to extract fields at different times, we recommend
          using `getValidForm()` instead because it validates all the input
          upfront and allows for a more structured pattern to validate input.

          In order to successfully decode a form object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/x-www-form-urlencoded"`
          2. Valid form data
      -
        name: getObject
        kind: method
        summary: Get the request's body as an object decoded from JSON in a
          callback function
        arguments:
          -
            name: completion
            type:
              arguments:
                -
                  name: obj
                  type: object
                  mullable: true
                  summary: The request's JSON body decoded into an object
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        name: getObject
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: object
            summary: The request's body object
        summary: Get the request's body object with a promise
        description: |
          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        introduced: 2020.28.0
        name: getForm
        kind: method
        summary: Get the request's body as a JSFormFieldMap in a
          callback function
        arguments:
          -
            name: completion
            type:
              arguments:
                -
                  name: form
                  type: JSFormFieldMap
                  mullable: true
                  summary: The request's form body
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          In order to successfully decode a form, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/x-www-form-urlencoded"`
          2. Valid form data
      -
        introduced: 2020.28.0
        name: getForm
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: JSFormFieldMap
            summary: The request's form object
        summary: Get the request's body as a JSFormFieldMap() with a promise
        description: |
          In order to successfully decode a JSON object, the request must 
          meet the following criteria:

          1. Content-Type equal to `"application/json; charset=utf-8"`
          2. Valid JSON data
      -
        name: getData
        kind: method
        summary: Get the request's body data in a callback function
        arguments:
          -
            name: completion
            type:
              arguments:
                -
                  name: data
                  type: JSData
                  mullable: true
                  summary: The request's data, or `null` if there was an error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
      -
        name: getData
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: JSData
            summary: The request's body data
        summary: Get the request's body data with a promise
  -
    name: Query String
    members:
      -
        introduced: 2020.28.0
        name: getValidQuery
        kind: method
        summary: Get an instance of the given class created from the request's query string with
          \`initWithValidatingObject()`
        arguments:
          -
            name: validatingContructionClass
            type: JSClass
            summary: The class of object to instantiate.  Must implement
              the `SKValidatingConstruction` protocol.
        description: |
          Creates an instance with all input validated via a
          `SKValidatingObject` passed to the init method.

          `getValidQuery()` is the recommended way to create objects from user
          input in a query string.
      -
        introduced: 2020.28.0
        name: getValidatingQuery
        kind: method
        summary: Get the request's query string as an validation-wrapped object decoded
          from a form in a callback function
        description: |
          A validating object provides a simple interface to extract user
          input while ensuring it meets input validation requirements.

          Unless you need to extract fields at different times, we recommend
          using `getValidQuery()` instead because it validates all the input
          upfront and allows for a more structured pattern to validate input.
  -
    name: Authentication
    members:
      -
        name: bearerToken
        introduced: 2021.10.0
        type: String
        nullable: true
        summary: The value of the token passed via Bearer authentication
      -
        name: username
        introduced: 2021.10.0
        type: String
        nullable: true
        summary: The value of the username passed via Basic authentication
      -
        name: password
        introduced: 2021.10.0
        type: String
        nullable: true
        summary: The value of the password passed via Basic authentication
  -
    name: Response
    members:
      -
        name: response
        type: SKHTTPResponse
        summary: The response object that will be sent for this request
      -
        name: close
        kind: method
        summary: Close the client connection immediately
  -
    name: Caching
    members:
      -
        name: needsEntity
        kind: method
        summary: Check if the client needs a new version of the resource
        arguments:
          -
            name: lastModified
            type: JSDate
            summary: The time the resource was last modified
          -
            name: etag
            type: String
            summary: The current unique tag for the resource
        description: |
          Given the resource's current identification, this method
          checks if the client has indicated through request headers that
          they already have the current version.