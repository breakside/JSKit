copyright: Copyright Â© 2020 Breakside Inc.
kind: class
inherits: JSObject
introduced: 2020.1.0
summary: Encrypt and Decrypt data using a variety of algorithms
description: |
  A cipher is used to encrypt or decrypt data.

  There are many different ways to encrypt data, and `SECCipher` includes
  support for the latest best-practice algorithms.
topics:
  -
    name: Algorithm Support
    members:
      -
        name: Algorithm
        kind: enum
        summary: The encryption algorithms that `SecurityKit` supports
        topics:
          -
            name: Options
            members:
              -
                name: aesCipherBlockChaining
                summary: AES Cipher Block Chaining (AES-CBC) symmetric encryption
              -
                name: aesCBC
                summary: An alias for `aesCipherBlockChaining`
              -
                name: aesCounter
                summary: AES Counter (AES-CTR) symmetric encryption
              -
                name: aesCTR
                summary: An alias for `aesCounter` symmetric encryption
              -
                name: aesGaloisCounterMode
                summary: AES Galois Counter Mode (AES-GCM) symmetric encryption
              -
                name: aesGCM
                summary: An alias for `aesGaloisCounterMode`
              -
                name: rsaOAEP
                summary: For RSA-OAEP asymmetric encryption
              -
                name: rivestCipher4
                summary: Rivest Cipher 4 (RC4).  Implemented to decrypt PDF
                  documents.  Not considered secure.
              -
                name: rc4
                summary: An alias for `rc4`.  Implemented to decrypt PDF
                  documents.  Not considered secure.
  -
    name: Creating a Cipher
    members:
      -
        name: initWithAlgorithm
        kind: init
        summary: Create a cipher for the given algorithm
        arguments:
          -
            name: algorithm
            type: Algorithm
            summary: The encryption algorithm to use for this cipher
        note: Uses default options
      -
        name: initWithAlgorithm
        introduced: 2020.40.0
        kind: init
        suffix: options
        summary: Create a cipher for the given algorithm and key size
        arguments:
          -
            name: algorithm
            type: Algorithm
            summary: The encryption algorithm to use for this cipher
          -
            name: options
            type: CipherOptions
            summary: The options for the given cipher algorithm, such as key
              bit length, initialization vector, additional authenticated data, etc.
        note: As of October 2020, Chrome does not support 192-bit AES keys, so
          we do not recommend using that algorithm/size combination if you need
          Chrome compatibility.
      -
        name: CipherOptions
        introduced: 2024.40.0
        kind: class
        anonymous: true
        summary: The possible options for cipher creation
        topics:
          - name: Options for AES-CBC
            members:
              - name: keyBitLength
                suffix: aes-cbc
                type: Number?
                summary: The key length in bits (must be 128, 192, or 256),
                  defaults to 256.
              - name: iv
                suffix: aes-cbc
                type: JSData?
                summary: The "initialization vector" data. Will be used for all
                  calls to `encrypt()`. If not provied, a random `iv` will be
                  generated during `encrypt()`
          - name: Options for AES-GCM
            members:
              - name: keyBitLength
                suffix: aes-gcm
                type: Number?
                summary: The key length in bits (must be 128, 192, or 256),
                  defaults to 256.
              - name: tagByteLength
                type: Number?
                summary: The length in bytes of the authentication tag/signature.
                  Defaults to 16 bytes.
              - name: ivByteLength
                type: Number?
                summary: The length in bytes of the "initialization vector",
                  which will be randomly generated during `encrypt()` unless
                  a specific `iv` is specied, in which case `ivByteLength`() is
                  ignored. Defaults to 16 bytes.
              - name: iv
                suffix: aes-gcm
                type: JSData?
                summary: The "initialization vector" data. Will be used for all
                  calls to `encrypt()`. If not provied, a random `iv`() of
                  `ivByteLength` will be generated during `encrypt()`
              - name: additionalData
                type: JSData?
                summary: The additional data that should be authenticated with
                  a signature, used for all calls to `encrypt()` and `decrypt()`
          - name: Options for RSA-OAEP
            members:
              - name: modulusLength
                type: Number?
                summary: The RSA modululs length, defaults to 2048
              - name: publicExponent
                type: Number?
                summary: The RSA public exponent, defaults to 0x10001
              - name: label
                type: JSData?
                summary: The optional label for RSA-OAEP
              - name: hash
                type: SECHash.Algorithm
                summary: The hash algorithm to use for RSA-OAEP, defaults to
                  `sha1`(SECHash.Algorithm.sha1)
        note: As of October 2020, Chrome does not support 192-bit AES keys, so
          we do not recommend using that algorithm/size combination if you need
          Chrome compatibility.
  -
    name: Encrypting
    members:
      -
        name: encrypt
        kind: method
        summary: Encrypt data and receive a callback with the result
        arguments:
          -
            name: data
            type: JSData
            summary: The unencrypted data
          -
            name: key
            type: SECKey
            summary: The key to use for encryption
          -
            name: completion
            type:
              arguments:
                -
                  name: encrypted
                  type: JSData
                  nullable: true
                  summary: The encrypted data, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        note: Encryption options such as the initialization vector or additional
          authenticated data can be provided during cipher construction via
          `CipherOptions`
      -
        name: encrypt
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: JSData
            summary: The encrypted data
        summary: Encrypt data and provide the result with a promise
        arguments:
          -
            name: data
            type: JSData
            summary: The unencrypted data
          -
            name: key
            type: SECKey
            summary: The key to use for encryption
        note: Encryption options such as the initialization vector or additional
          authenticated data can be provided during cipher construction via
          `CipherOptions`
      -
        name: encryptString
        kind: method
        summary: Encrypt a string and receive a callback with the result
        arguments:
          -
            name: string
            type: String
            summary: The unencrypted string
          -
            name: key
            type: SECKey
            summary: The key to use for encryption
          -
            name: completion
            type:
              arguments:
                -
                  name: encrypted
                  type: JSData
                  nullable: true
                  summary: The encrypted data, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          The string will first be encoded using UTF-8
      -
        name: encryptString
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: JSData
            summary: The encrypted data
        summary: Encrypt a string and provide the result with a promise
        arguments:
          -
            name: string
            type: String
            summary: The unencrypted string
          -
            name: key
            type: SECKey
            summary: The key to use for encryption
        description: |
          The string will first be encoded using UTF-8
  -
    name: Decrypting
    members:
      -
        name: decrypt
        kind: method
        summary: Decrypt data and receive a callback with the result
        arguments:
          -
            name: data
            type: JSData
            summary: The encrypted data
          -
            name: key
            type: SECKey
            summary: The key to use for decryption
          -
            name: completion
            type:
              arguments:
                -
                  name: decrypted
                  type: JSData
                  nullable: true
                  summary: The decrypted data, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        note: Decryption options such as the initialization vector or additional
          authenticated data can be provided during cipher construction via
          `CipherOptions`
      -
        name: decrypt
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: JSData
            summary: The decrypted data
        summary: Decrypt data and provide the result with a promise
        arguments:
          -
            name: data
            type: JSData
            summary: The encrypted data
          -
            name: key
            type: SECKey
            summary: The key to use for decryption
        note: Decryption options such as the initialization vector or additional
          authenticated data can be provided during cipher construction via
          `CipherOptions`
      -
        name: decryptString
        kind: method
        summary: Decrypt a string and receive a callback with the result
        arguments:
          -
            name: encrypted
            type: JSData
            summary: The encrypted data
          -
            name: key
            type: SECKey
            summary: The key to use for decryption
          -
            name: completion
            type:
              arguments:
                -
                  name: decrypted
                  type: String
                  nullable: true
                  summary: The decrypted string, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          The decrypted data will be decoded into a string using UTF-8.
      -
        name: decryptString
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: String
            summary: The decrypted string
        summary: Decrypt a string and provide the result with a promise
        arguments:
          -
            name: encrypted
            type: JSData
            summary: The encrypted data
          -
            name: key
            type: SECKey
            summary: The key to use for decryption
        description: |
          The decrypted data will be decoded into a string using UTF-8.
  -
    name: Creating Keys
    members:
      -
        name: createKey
        kind: method
        summary: Create a new random key and receive a callback with the result
        arguments:
          -
            name: completion
            type:
              arguments:
                -
                  name: key
                  type: SECKey
                  nullable: true
                  summary: The new key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        note: For asymmetric ciphers, the resulting key will be a private key.
          The corresponding public key can be obtained from the resulting key's
          `publicKey`(SECKey.publicKey) property.
      -
        name: createKey
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SECKey
            summary: The new key
        summary: Create a new random key and provide the result with a promise
        note: For asymmetric ciphers, the resulting key will be a private key.
          The corresponding public key can be obtained from the resulting key's
          `publicKey`(SECKey.publicKey) property.
      -
        name: createKeyWithData
        kind: method
        summary: Create a `SECKey` from raw data and receive a callback with the result
        arguments:
          -
            name: keyData
            type: JSData
            summary: The key's data, obtained from an external source
          -
            name: completion
            type:
              arguments:
                -
                  name: key
                  type: SECKey
                  nullable: true
                  summary: The new key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
      -
        name: createKeyWithData
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SECKey
            summary: The new key
        summary: Create a `SECKey` from raw data and provide the result with a promise
        arguments:
          -
            name: keyData
            type: JSData
            summary: The key's data, obtained from an external source
      -
        name: createKeyWithPassphrase
        kind: method
        summary: Create a password-derived key and receive a callback with the result
        arguments:
          -
            name: passphrase
            type: String
            summary: The passphrase to use when generating the key
          -
            name: salt
            type: JSData
            summary: A random salt to use in the key generation process
          -
            name: iterations
            type: Number
            summary: The number of PBKDF2 iterations to perform
          -
            name: hash
            type: SECHash.Algorithm
            summary: The hash function to use
          -
            name: completion
            type:
              arguments:
                -
                  name: key
                  type: SECKey
                  nullable: true
                  summary: The new key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          A password derived key can be re-derived if the user supplies the
          same password.  Therefore, the generated key doesn't have to be
          saved anywhere.  Only the salt should be saved, and it's up to
          the user to remember their passphrase.
      -
        name: createKeyWithPassphrase
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SECKey
            summary: The new key
        summary: Create a password-derived key and provide the result with a promise
        arguments:
          -
            name: passphrase
            type: String
            summary: The passphrase to use when generating the key
          -
            name: salt
            type: JSData
            summary: A random salt to use in the key generation process
          -
            name: iterations
            type: Number
            summary: The number of PBKDF2 iterations to perform
          -
            name: hash
            type: SECHash.Algorithm
            summary: The hash function to use
        description: |
          A password derived key can be re-derived if the user supplies the
          same password.  Therefore, the generated key doesn't have to be
          saved anywhere.  Only the salt should be saved, and it's up to
          the user to remember their passphrase.
      -
        name: createKeyFromJWK
        introduced: 2021.8.2
        kind: method
        summary: Create a `SECKey` from a jwk and receive a callback with the
          result
        arguments:
          -
            name: jwk
            type: JSONWebKey
            summary: The JWK that contains the key data
          -
            name: completion
            type:
              arguments:
                -
                  name: key
                  type: SECKey
                  nullable: true
                  summary: The new key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
      -
        name: createKeyFromJWK
        introduced: 2021.8.2
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SECKey
            summary: The new key
        summary: Create a `SECKey` from a jwk and provide the result with a promise
        arguments:
          -
            name: jwk
            type: JSONWebKey
            summary: The JWK that contains the key data
      -
        name: createKeyFromKeystore
        introduced: 2021.8.2
        kind: method
        summary: Create a `SECKey` from information contained in a keystore
        arguments:
          -
            name: keystore
            type: SECKeystore
            summary: The keystore that contains the key data
          -
            name: identifier
            type: String
            summary: The identifier of the key in the keystore
          -
            name: completion
            type:
              arguments:
                -
                  name: key
                  type: SECKey
                  nullable: true
                  summary: The new key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
      -
        name: createKeyFromKeystore
        introduced: 2021.8.2
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SECKey
            summary: The new key
        summary: Create a `SECKey` from information contained in a keystore and
          provide the result in a promise
        arguments:
          -
            name: keystore
            type: SECKeystore
            summary: The keystore that contains the key data
          -
            name: identifier
            type: String
            summary: The identifier of the key in the keystore
  -
    name: Key Wrapping
    members:
      -
        name: wrapKey
        kind: method
        summary: Wrap a key using another key and receive a callback with the result
        arguments:
          -
            name: key
            type: SECKey
            summary: The key to wrap
          -
            name: wrappingKey
            type: SECKey
            summary: The key to use when wrapping the other key
          -
            name: completion
            type:
              arguments:
                -
                  name: encrypted
                  type: JSData
                  nullable: true
                  summary: The encrypted key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
      -
        name: wrapKey
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: JSData
            summary: The encrypted key
        summary: Wrap a key using another key and provide the result with a promise
        arguments:
          -
            name: key
            type: SECKey
            summary: The key to wrap
          -
            name: wrappingKey
            type: SECKey
            summary: The key to use when wrapping the other key
      -
        name: unwrapKey
        kind: method
        summary: Unwrap a key using another key and receive a callback with the result
        arguments:
          -
            name: wrappedKeyData
            type: JSData
            summary: The encrypted key data
          -
            name: unwrappedKeyAlgorithm
            type: Algorithm
            summary: The algorithm for the key being unwrapped
          -
            name: wrappingKey
            type: SECKey
            summary: The key used to unwrap the wrapped key
          -
            name: completion
            type:
              arguments:
                -
                  name: key
                  type: SECKey
                  nullable: true
                  summary: The unwrapped key, or `null` on error
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
      -
        name: unwrapKey
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: SECKey
            summary: The unwrapped key
        summary: Unwrap a key using another key and provide the result with a promise
        arguments:
          -
            name: wrappedKeyData
            type: JSData
            summary: The encrypted key data
          -
            name: unwrappedKeyAlgorithm
            type: Algorithm
            summary: The algorithm for the key being unwrapped
          -
            name: wrappingKey
            type: SECKey
            summary: The key used to unwrap the wrapped key
  -
    name: Random Data Generation
    members:
      -
        name: getRandomData
        kind: method
        static: true
        type: JSData
        return: A random byte array of the given length
        summary: Generate a random number of bytes in a secure fashion
        arguments:
          -
            name: length
            type: Number
            summary: The number of random bytes to generate
  -
    name: Deprecated
    members:
      -
        name: initWithAlgorithm
        introduced: 2020.28.0
        deprecated: 2024.40.0
        kind: init
        suffix: keysize
        summary: Create a cipher for the given algorithm and key size
        arguments:
          -
            name: algorithm
            type: Algorithm
            summary: The encryption algorithm to use for this cipher
          -
            name: keyBitLength
            type: Number
            summary: The length in bits of the key size for this cipher
        description: |
          Instead of passing a sigle key bit length option, you can now pass
          a `CipherOptions` dictionary containing multiple options.
        note: As of October 2020, Chrome does not support 192-bit AES keys, so
          we do not recommend using that algorithm/size combination if you need
          Chrome compatibility.