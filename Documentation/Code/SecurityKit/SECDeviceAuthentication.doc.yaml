copyright: Copyright Â© 2020 Breakside Inc.
kind: class
inherits: JSObject
introduced: 2020.33.0
summary: Use the local device to authenticate a user with a built-in authenticator
  or an external security key
description: |
  Useful for two-factor authentation with a hardware device that can generate
  keypairs for authentation.
topics:
  -
    name: Creating an Authentication object
    members:
      -
        name: shared
        static: true
        type: SECDeviceAuthentication
        summary: The shared authentication instance
  -
    name: Public Key Authentication
    members:
      -
        name: createPublicKey
        kind: method
        summary: Create a new public key using a callback for authenticating a user
        arguments:
          -
            name: registration
            type: PublicKeyRegistration
          -
            name: completion
            type:
              arguments:
                -
                  name: result
                  type: RegistrationResult
                  nullable: true
                  summary: The created key associated information, or `null` if
                    a key could not be created
          -
            name: target
            type: any
            default: "undefined"
            summary: The object to use as `this`() when calling `completion`()
      -
        name: createPublicKey
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: RegistrationResult
            summary: The created key associated information
        summary: Create a new public key using a promise for authenticating a user
        arguments:
          -
            name: registration
            type: PublicKeyRegistration
      -
        name: authenticate
        kind: method
        summary: Authenticate a user by having the device sign some random challenge data
        arguments:
          -
            name: request
            type: PublicKeyAuthentication
            summary: The authentication request
          -
            name: completion
            type:
              arguments:
                name: result
                type: AuthenticationResult
                nullable: true
                summary: The result of signing the challenge data
          -
            name: target
            type: any
            default: "undefined"
            summary: The object to use as `this`() when calling `completion`()
      -
        name: authenticate
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: AuthenticationResult
            summary: The result of signing the challenge data
        summary: Authenticate a user by having the device sign some random challenge data
        arguments:
          -
            name: request
            type: PublicKeyAuthentication
            summary: The authentication request
      -
        name: PublicKeyRegistration
        kind: class
        anonymous: true
        summary: The registration object to use when creating a new public key
          with `createPublicKey()`
        topics:
          -
            name: Properties
            members:
              -
                name: providerName
                type: String
                nullable: true
                summary: The display name identifying the entity that is requesting
                  authentication, typically your company or app name
              -
                name: challengeData
                type: JSData
                nullable: true
                summary: The random data to be signed by the private key counterpart
                  to the returned public key
                description: |
                  Typically challenge data is provided by a server than can
                  independently verify the signature
              -
                name: supportedAlgorithms
                type: SECSign.Algorithm[]
                nullable: true
                summary: The the algorithms that can be used to create the new public key
                description: |
                  Priority is highest for the first item in the list and lowest for the last item.

                  Defaults to:

                  ````
                  [
                    SECSign.Algorithm.ellipticCurveSHA512,
                    SECSign.Algorithm.ellipticCurveSHA384,
                    SECSign.Algorithm.ellipticCurveSHA256,
                    SECSign.Algorithm.rsaSHA512,
                    SECSign.Algorithm.rsaSHA384,
                    SECSign.Algorithm.rsaSHA256
                  ]
                  ````
              -
                name: userId
                type: String
                nullable: true
                summary: A unique id for the user that will be associated with this public key
              -
                name: accountName
                type: String
                nullable: true
                summary: The display name for the user's account, to help distinguish it
                  from other accounts
                description: |
                  Defaults to `providerName + " User"`
              -
                name: domain
                type: String
                environment: html
                nullable: true
                summary: An alternative domain to use when matching keys
                description: |
                  Defaults to the current page's domain.  Can only be the page's
                  domain or a higher level domain with the same suffix.
      -
        name: RegistrationResult
        kind: class
        anonymous: true
        summary: The result of authenticating by singing a challenge
        topics:
          -
            name: Properties
            members:
              -
                name: jwk
                type: SECJSONWebToken.JSONWebKey
                summary: The public key that was created
                description: |
                  The `kid`() property of the JWK can be used to uniquely identify the key.
              -
                name: challenge
                type: JSData
                summary: An echo of the callenge data
                note: |
                  If the signing was done in the HTML environment, the signature
                  conforms to WebAuthn standards and includes more input data
                  than just the challenge.  Rather than inspecting this
                  `challenge` property, You'll want to verify that the
                  `clientData` includes the correct challenge in its JSON structure.
              -
                name: webauthn
                type: RegistrationWebAuthn
                nullable: true
                summary: More information required to verify a WebAuthn generated signature
                important: |
                  If present, indicates that a WebAuthn attestation is provided
                  to perform verification of the key ownership and integrity
      -
        name: RegistrationWebAuthn
        kind: class
        anonymous: true
        summary: The extra properties for a WebAuthn signature
        topics:
          -
            name: Properties
            members:
              -
                name: attestation
                type: RegistrationWebAuthnAttestation
                summary: The webauthn attestation result
              -
                name: clientData
                type: String
                summary: The base64-url encoded client data used in the signature calculation
      -
        name: RegistrationWebAuthnAttestation
        kind: class
        anonymous: true
        summary: The structure of a WebAuthn registration attestation
        description: |
          The format is fully defined in the Web Authentication specification
        topics:
          -
            name: Properties
            members:
              -
                name: fmt
                type: String
                summary: The attestation statement format
              -
                name: attStmt
                type: object
                summary: The attestation statement
              -
                name: authData
                type: String
                summary: The base64-encoded authentication data used in the attestation statement
      -
        name: PublicKeyAuthentication
        kind: class
        anonymous: true
        summary: The authentication request object to use with `authenticate()`
        topics:
          -
            name: Properties
            members:
              -
                name: challengeData
                type: JSData
                summary: The random data to be signed by the private key counterpart
                  to the returned public key
                description: |
                  Typically challenge data is provided by a server than can
                  independently verify the signature
              -
                name: domain
                type: String
                environment: html
                nullable: true
                summary: An alternative domain to use when matching keys
                description: |
                  Defaults to the current page's domain.  Can only be the page's
                  domain or a higher level domain with the same suffix.
              -
                name: allowedKeyIDs
                type: String[]
                nullable: true
                summary: The `kid`s of previously registered keys for the account
                description: |
                  Useful when doing two factor authentication to limit the acceptable
                  keys to only those that have been assigned to the account.
      -
        name: AuthenticationResult
        kind: class
        anonymous: true
        summary: The result of authenticating by singing a challenge
        topics:
          -
            name: Properties
            members:
              -
                name: kid
                type: String
                summary: The key id for the public key counterpart of the private key that signed the request
                description: |
                  Used to uniquely identify the key on your server
              -
                name: challenge
                type: JSData
                summary: An echo of the callenge data
                note: |
                  If the signing was done in the HTML environment, the signature
                  conforms to WebAuthn standards and includes more input data
                  than just the challenge.  Rather than inspecting this
                  `challenge` property, You'll want to verify that the
                  `clientData` includes the correct challenge in its JSON structure.
              -
                name: signature
                type: JSData
                summary: The signature generated by signing the challenge data
                note: |
                  If the signing was done in the HTML environment, the signature
                  conforms to WebAuthn standards and includes more input data
                  than just the challenge.  See the `webauthn` property for
                  all the data required to verify the signature
              -
                name: webauthn
                type: SignatureWebAuthn
                nullable: true
                summary: More information required to verify a WebAuthn generated signature
                important: |
                  If present, indicates that the `signature` includes more input data than
                  just the challenge.  Specifically, the signature was done over
                  `authData || sha256(clientData)`.
      -
        name: SignatureWebAuthn
        kind: class
        anonymous: true
        summary: The extra properties for a WebAuthn signature
        topics:
          -
            name: Properties
            members:
              -
                name: authData
                type: String
                summary: The base64-url encoded auth data used in the signature calculation
              -
                name: clientData
                type: String
                summary: The base64-url encoded client data used in the signature calculation