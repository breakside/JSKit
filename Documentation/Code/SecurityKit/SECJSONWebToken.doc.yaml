copyright: Copyright Â© 2020 Breakside Inc.
kind: class
inherits: JSObject
introduced: 2020.1.0
summary: Parse and verify JSON Web Tokens
topics:
  -
    name: Create a Token
    members:
      -
        name: initWithString
        kind: init
        summary: Create a JSON Web Token to read from a string
        arguments:
          - 
            name: string
            type: String
            summary: The string representing a JSON web token
        description: |
          JSON Web Token uses base64 (URL variant) to encode 3 chunks of data,
          and then combines the three parts into one string using a `"."` in
          between each part.

          This combined string is what is expected here.
      -
        introduced: 2020.28.0
        name: initWithPayload
        kind: init
        summary: Create a JSON Web Token to sign from a payload
        arguments:
          -
            name: payload
            type: object
            summary: The payload to sign
        description: |
          Used when you are constructing a JSON Web Token to send to someone
          else
  -
    name: Getting Verified Content
    members:
      -
        name: signed
        type: boolean
        summary: Indicates if the token is signed
      -
        name: verifiedPayload
        kind: method
        summary: Returns the token's content dictionary via callback, but only
          if the signature is valid
        arguments:
          -
            name: publicKeys
            type: JSONWebKey[]
            summary: The public JSON Web Keys for this token
          -
            name: completion
            type:
              arguments:
                -
                  name: payload
                  type: dictionary
                  nullable: true
                  summary: The token's contents, or `null` if verification
                    failed
            summary: The function to call the the result
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          The key with a `kid` matching the JWT will be used for decryption.

          See `JSONWebKey` for a description of how to obtain public keys for
          well known services.
      -
        name: verifiedPayload
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: dictionary
            summary: The token's verified contents
        summary: Returns the token's content dictionary via a promise, but only
          if the signature is valid
        arguments:
          -
            name: publicKeys
            type: JSONWebKey[]
            summary: The public JSON Web Keys for this token
        description: |
          The key with a `kid` matching the JWT will be used for decryption.

          See `JSONWebKey` for a description of how to obtain public keys for
          well known services.
      -
        introduced: 2020.28.0
        name: verifiedPayload
        suffix: single-key
        kind: method
        summary: Returns the token's content dictionary via callback, but only
          if the signature is valid
        arguments:
          -
            name: key
            type: JSONWebKey
            summary: The JSON Web Key for this token
          -
            name: completion
            type:
              arguments:
                -
                  name: payload
                  type: dictionary
                  nullable: true
                  summary: The token's contents, or `null` if verification
                    failed
            summary: The function to call the the result
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          If you have a single shared key as raw data, the `JSONWebKey` for it
          would look like:

          ````
          var jwk = {
            kty: "oct",
            k: "abcde..." // base64-url of the raw key data
          };
          ````
      -
        introduced: 2020.28.0
        name: verifiedPayload
        suffix: single-key-promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: dictionary
            summary: The token's verified contents
        summary: Returns the token's content dictionary via a promise, but only
          if the signature is valid
        arguments:
          -
            name: key
            type: JSONWebKey
            summary: The JSON Web Key for this token
        description: |
          If you have a single shared key as raw data, the `JSONWebKey` for it
          would look like:

          ````
          var jwk = {
            kty: "oct",
            k: "abcde..." // base64-url of the raw key data
          };
          ````
  -
    name: Signing
    members:
      -
        introduced: 2020.28.0
        name: sign
        kind: method
        summary: Sign this JSON Web Token with the given key
        arguments:
          -
            name: key
            type: JSONWebKey
            summary: The key to use when signing this token
          -
            name: completion
            type:
              arguments:
                -
                  name: jwt
                  type: String
                  summary: The string representation of the signed token to send
          -
            name: target
            type: any
            default: "undefined"
            summary: The object to use as `this` when calling `completion`
        description: |
          Used in conjunction with `initWithPayload()` to create and sign
          your own token to send to someone else.
        see:
          - SECSign.createJWKPair()
      -
        introduced: 2020.28.0
        name: sign
        suffix: promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: String
            summary: The string representation of the signed token to send
        summary: Sign this JSON Web Token with the given key
        arguments:
          -
            name: key
            type: JSONWebKey
            summary: The key to use when signing this token
        description: |
          Used in conjunction with `initWithPayload()` to create and sign
          your own token to send to someone else.
        see:
          - SECSign.createJWKPair()
      -
        name: stringRepresentation
        kind: method
        summary: Get the base64-url encoded JSON Web Token to send
  -
    name: Keys
    members:
      -
        name: JSONWebKey
        kind: class
        anonymous: true
        summary: A JSON Web Key (JWK)
        description: |
          The [JSON Web Key RFC](https://tools.ietf.org/html/rfc7517) explains
          the full format, which will not be duplicated here.

          For purposes of token validation, the key format is unimportant.  It
          is how to get the keys that requires documentation.

          Typically the keys are provided in a well-known location by the
          service that generated the token.

          For example, if you're using `https://accounts.google.com/`, you can
          load `https://accounts.google.com/.well-known/openid-configuration`
          to get JSON object describing Google's service.

          In the JSON is a `jwks_uri`() property with a URL value. Loading that
          `jwks_uri`() returns a JSON object with a `keys`() property
          that contains an array of JWKs suitable to serve as this type.

          If you're using `AuthKit`, all of this fetching happens automatically
          for the services it knows about.
  -
    name: Constants
    members:
      -
        introduced: 2020.28.0
        name: Algorithm
        kind: enum
        summary: The supported signature algorithms
        description: |
          Corresponds to the `alg` property within a JWT header
        topics:
          -
            name: Options
            members:
              -
                name: none
                summary: The JWT is not signed
              -
                name: hmacSHA256
                summary: The JWT is signed with a symmetric HMAC using SHA256
              -
                name: hmacSHA384
                summary: The JWT is signed with a symmetric HMAC using SHA384
              -
                name: hmacSHA512
                summary: The JWT is signed with a symmetric HMAC using SHA512
              -
                name: rsaSHA256
                summary: The JWT is signed with a RSA using SHA256
              -
                name: rsaSHA384
                summary: The JWT is signed with a RSA using SHA384
              -
                name: rsaSHA512
                summary: The JWT is signed with a RSA using SHA512
              -
                introduced: 2020.33.0
                name: ellipticCurveSHA256
                summary: The JWT is signed with a RSA using SHA256
              -
                introduced: 2020.33.0
                name: ellipticCurveSHA384
                summary: The JWT is signed with a RSA using SHA384
              -
                introduced: 2020.33.0
                name: ellipticCurveSHA512
                summary: The JWT is signed with a RSA using SHA512
      -
        introduced: 2020.28.0
        name: KeyType
        kind: enum
        summary: The types of `JSONWebKey`s
        description: |
          Corresponds to the `kty` property within a `JSONWebKey`
        topics:
          -
            name: Options
            members:
              -
                name: symmetric
                summary: The key uses a symmetric algorithm
              -
                name: rsa
                summary: The key uses the RSA algorithm
              -
                name: ellipticCurve
                summary: The key uses the Elliptic Curve algorithm
      -
        introduced: 2020.33.0
        kind: enum
        name: EllipticCurve
        summary: The supported named curves
        topics:
          -
            name: Options
            members:
              -
                name: p256
                summary: The `P-256`() curve, also known as `secp256r1`()
              -
                name: p384
                summary: The `P-384`() curve, also known as `secp384r1`()
              -
                name: p521
                summary: The `P-521`() curve, also known as `secp521r1`()
  -
    name: Deprecated
    members:
      -
        deprecated: 2020.28.0
        name: verifiedPayload
        suffix: shared-secret
        kind: method
        summary: Returns the secret-key-signed token's content dictionary via
          callback, but only if the signature is valid
        arguments:
          -
            name: sharedSecretKeyData
            type: JSData
            summary: The data of the shared secret key used to sign the
              token
          -
            name: completion
            type:
              arguments:
                -
                  name: payload
                  type: dictionary
                  nullable: true
                  summary: The token's contents, or `null` if verification
                    failed
            summary: The function to call the the result
          -
            name: target
            type: object
            default: "undefined"
            summary: The object to use as `this` when calling the completion
              function
        description: |
          Secret key based tokens are not the norm because of the problem of
          how the secret key gets shared.
        note: |
          Instead of passing the raw key data, pass a JWK that contains the
          data and algorithm information.  See the JWK specification for more
          information.

          ````
          var jwk = {
            kty: "oct",
            k: "abcde..." // base64-url of the raw key data
          };
          ````
      -
        deprecated: 2020.28.0
        name: verifiedPayload
        suffix: shared-secret-promise
        kind: method
        type: Promise
        promise:
          resolve:
            type: dictionary
            summary: The token's verified contents
        summary: Returns the secret-key-signed token's content dictionary via a
          promise, but only if the signature is valid
        arguments:
          -
            name: sharedSecretKeyData
            type: JSData
            summary: The data of the shared secret key used to sign the
              token
        description: |
          Secret key based tokens are not the norm because of the problem of
          how the secret key gets shared.
        note: |
          Instead of passing the raw key data, pass a JWK that contains the
          data and algorithm information.  See the JWK specification for more
          information.

          ````
          var jwk = {
            kty: "oct",
            k: "abcde..." // base64-url of the raw key data
          };
          ````