copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: "1.0.0"
summary: A two-dimensional size with `width` and `height`, useful for graphics
  and user interface elements
description: |
  `JSSize` is a building block for various graphics-related tasks.  Along with
  `JSPoint`, it can define a rectangle like `JSRect`.

  `UIKit` makes extensive use of `JSSize` in view sizing, text layout, and other
  UI elements.

  Every `JSImage` has a width and height specified via a `JSSize` object.
topics:
  -
    name: Creating Sizes
    members:
      -
        kind: constructor
        summary: Create a new size
        return: The new size
        type: JSSize
        arguments:
          -
            name: width
            type: Number
            summary: The width or horizontal component of the new size
          -
            name: height
            type: Number
            summary: The height or vertical component of the new size
      -
        kind: constructor
        prefix: copy
        summary: Copy a size
        description: |
          Sizes should be copied anytime before making modifications if the
          original size should remain the same.

          For exmaple, a function might make a copy of a passed argument before
          modifying it:

          ````
          function constrainedSize(size){
            size = JSSize(size);
            if (size.width > 100){
              // Since we're modifying the size here, but only want to affect
              // the return value, we need to first do a copy of the size
              size.width = 100;
            }
            if (size.height > 100){
              size.height = 100;
            }
            return size;
          }
          ````
        return: A new size that is an exact copy of the other
        type: JSSize
        arguments:
          -
            name: other
            type: JSSize
            summary: The size to copy
      -
        kind: property
        static: true
        name: Zero
        type: JSSize
        summary: A size with width and height components set to 0
        description: |
          A shortcut for
          ````
          JSSize(0, 0)
          ````
          that can be used as a default starting point or as a comparison as in:
          ````
          var size = sizeFromSomewhere();
          if (size.isEqual(JSSize.Zero)){
            // 
          }else{
            // 
          }
          ````
        note: Even though this looks like a property, it will always return a
          new `JSSize` each time it is invoked, ensuring that nothing can
          accidentally modify or overwrite the `Zero` property.
      -
        name: initWithSpec
        kind: method
        static: true
        summary: Create a size from a value in a spec file
        arguments:
          - 
            name: spec
            type: JSSpec
            summary: The spec in which the size is described
          - 
            name: values
            type: any
            summary: The value that the describes the size in the spec
        description: |
          Typically used in `initWithSpec()`(JSObject.initWithSpec())
          implementations for objects that have `JSSize` properties.

          Handles the various ways a `JSSize` can be specified in a spec file.

          See [Spec File Properties](Spec File Properties) for more information
          about how to write a `JSSize` in a spec file.
      -
        name: Spec File Properties
        kind: spec
        summary: The ways to specify a `JSSize` in a spec file
        description: |
          A size can be specified in various ways in a spec file:
          1. As a comma-separated `String` of `width`()`,``height`() like `"24,32"`
          2. As a dictionary with `width` and `height` properties
          3. As a single `Number` that will be used for both
            `width`(JSSize.width) and `height`(JSSize.height)

          All three of these are equivalent:

          String form:
          ````
          Object:
            size: 32,32
          ````

          Number form:
          ````
          Object:
            size: 32
          ````

          Dictionary form:
          ````
          Object:
            size:
              width: 32
              height: 32
          ````
        topics:
          -
            name: Dictionary Representation
            members:
              -
                name: width
                type: Number
                summary: The width of the size
              -
                name: height
                type: Number
                summary: The height of the size
  -
    name: Dimensions
    members:
      -
        name: width
        type: Number
        summary: The width or horizontal component of the size
      -
        name: height
        type: Number
        summary: The height or vertical component of the size