copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: "1.0.0"
summary: A rectangle useful for graphics and user interface elements
description: |
  `JSRect` is a building block for various graphics-related tasks.  It is made
  by combining a `JSPoint` origin with a `JSSize` extent.

  `UIKit` makes extensive use of `JSRect` in view positioning, text layout,
  and other UI elements.
topics:
  -
    name: Creating Rectangles
    members:
      -
        kind: constructor
        prefix: expanded
        summary: Create a new rectangle
        return: The new rectangle
        type: JSRect
        arguments:
          -
            name: x
            type: Number
            summary: The `x` coordinate of the rectangle's origin
          -
            name: y
            type: Number
            summary: The `y` coordinate of the rectangle's origin
          -
            name: width
            type: Number
            summary: The `width` component of the rectangle's size
          -
            name: height
            type: Number
            summary: The `height` component of the rectangle's size
      -
        kind: constructor
        summary: Create a new rectangle
        return: The new rectangle
        type: JSRect
        arguments:
          -
            name: origin
            type: JSPoint
            summary: The origin point of the rectangle
          -
            name: size
            type: JSSize
            summary: The size of the rectangle
      -
        kind: constructor
        prefix: copy
        summary: Copy a rectangle
        description: |
          Rectangles should be copied anytime before making modifications if the
          original rectangle should remain the same.

          For exmaple, a function might make a copy of a passed argument before
          modifying it:

          ````
          function constrainedRect(rect){
            rect = JSRect(rect);
            if (rect.size.width > 100){
              // Since we're modifying the rect here, but only want to affect
              // the return value, we need to first do a copy of the rect
              rect.size.width = 100;
            }
            if (rect.size.height > 100){
              rect.size.height = 100;
            }
            return rect;
          }
          ````
        return: A new rectangle that is an exact copy of the other
        type: JSRect
        arguments:
          -
            name: other
            type: JSRect
            summary: The rectangle to copy
      -
        kind: property
        static: true
        name: Zero
        type: JSRect
        summary: A rectangle with a 0,0 origin and a 0x0 size
        description: |
          A shortcut for
          ````
          JSRect(0, 0, 0, 0)
          ````
          that can be used as a default starting point or as a comparison as in:
          ````
          var rect = rectFromSomewhere();
          if (rect.isEqual(JSRect.Zero)){
            // 
          }else{
            // 
          }
          ````
        note: Even though this looks like a property, it will always return a
          new `JSRect` each time it is invoked, ensuring that nothing can
          accidentally modify or overwrite the `Zero` property.
      -
        name: initWithSpec
        kind: method
        static: true
        summary: Create a rect from a value in a spec file
        arguments:
          - 
            name: spec
            type: JSSpec
            summary: The spec in which the rect is described
          - 
            name: values
            type: any
            summary: The value that the describes the rect in the spec

        description: |
          Typically used in `initWithSpec()`(JSObject.initWithSpec())
          implementations for objects that have `JSRect` properties.

          Handles the various ways a `JSRect` can be specified in a spec file.

          See [Spec File Properties](Spec File Properties) for more information
          about how to write a `JSRect` in a spec file.
      -
        name: Spec File Properties
        kind: spec
        summary: The ways to specify a `JSRect` in a spec file
        description: |
          A rect can be specified in various ways in a spec file:
          1. As a comma-separated `String` like `"10,20,300,400"` where the
             components refer to, in order,
             - `origin.x`()
             - `origin.y`()
             - `size.width`()
             - `size.height`()
          2. As a dictionary with `x`, `y`, `width`, and `height` properties
          2. As a dictionary with `origin` and `size` properties

          All of these are equivalent:

          String form:
          ````
          View:
            frame: 10,20,300,400
          ````

          Dictionary form:
          ````
          View:
            frame:
              x: 10
              y: 20
              width: 300
              height: 400
          ````

          Expanded Dictionary form:
          ````
          View1:
            frame:
              origin: 10,20
              size: 300,400

          View2:
            frame:
              origin:
                x: 10
                y: 20
              size:
                width: 300
                height: 400
          ````
        topics:
          -
            name: Dictionary Representation
            members:
              -
                name: x
                type: Number
                summary: The x component of the origin
                description: |
                  If unspecified, defaults to `0`
              -
                name: "y"
                type: Number
                summary: The y component of the origin
                description: |
                  If unspecified, defaults to `0`
              -
                name: width
                type: Number
                summary: The width of the rect
                description: |
                  If unspecified, defaults to `0`
              -
                name: height
                type: Number
                summary: The height of the rect
                description: |
                  If unspecified, defaults to `0`
          -
            name: Expanded Dictionary Representation
            members:
              -
                name: origin
                type: JSPoint
                summary: The rect's origin
                description: |
                  Overrides `x` and `y` properties.

                  If unspecified, defaults to `JSPoint.Zero`
              -
                name: size
                type: Size
                summary: The rect's size
                  Overrides `width` and `height` properties.

                  If unspecified, defaults to `JSSize.Zero`
  -
    name: Location
    members:
      -
        name: origin
        type: JSPoint
        summary: The origin point of the rectangle
      -
        name: size
        type: JSSize
        summary: The size of the rectangle
      -
        name: center
        type: JSPoint
        summary: The center point of the rectangle
        description: |
          Sometimes it's more conveient to query or specify the center point of
          a rectangle than its `origin`.

          This property is calculated based on the `origin` and `size`
  -
    name: Hit Testing
    members:
      -
        name: containsPoint
        kind: method
        type: boolean
        return: \`true` if the rectangle contains the given point, `false` otherwise
        summary: Check if the given point is within this rectangle
        arguments:
          -
            name: point
            type: JSPoint
            summary: The point to check
      -
        name: intersectsRect
        kind: method
        type: boolean
        return: \`true` if this rectangle intersects with the other rectangle
          given, `false` otherwise
        summary: Check if two rectangles intersect
        arguments:
          -
            name: other
            type: JSRect
            summary: The other rectangle
        description:
          Two rectangles intersect if there is a non-zero area created by their
          overlap.
        note: If either rect has a `width` or `height` of `0`, this function
          will always return false.

  -
    name: Calculations
    members:
      -
        name: rectWithInsets
        kind: method
        type: JSRect
        return: A new rectangle inset from this rectangle by the given amount
        summary: Create a new rectangle based off of this one and a given set of
          insets
        arguments:
          -
            name: insets
            type: JSInsets
            summary: The insets that should be combined with this rectangle to
              create a new rectangle
            description: |
              Positive insets will result in a rectangle smaller than this
              rectangle, while negative insets will result in a larger
              rectangle.

              This method can be especially useful when dealing with a
              padding-like property.