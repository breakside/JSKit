copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: 2020.1.0
summary: The base class for all other JSKit classes, providing common
  functionality such as binding and observers.
description: |
  `JSObject` the root class in the JSKit class hierarchy.

  All objects extending from `JSObject` inherit the ability to participate
  in value binding and observing, along with class inspection methods.
topics:
  -
    name: Creating a JSObject
    members:
      -
        name: init
        kind: init
        summary: Create an empty object
        note: |
          Every subclass inherits this default init method.

          However, since this method does absolutely nothing, subclasses
          *do not* need to call `$super.init` if they override this method
          or if they declare a different init method.

          Properties such as `objectID` are always initialized during object
          construction, even if this init method is not called.
      -
        name: initWithSpec
        kind: init
        summary: Initialize an object with the values extracted from part of
          a spec file
        description: |
          A `JSSpec` is a serialized dictionary of properties that describes a
          collection of objects.

          When an object is requested from the spec, via `JSSpec.resolveValue()`,
          the object will be initialized using this init method.

          Typically a class will implement its own version of this method
          to initialize properties from the spec, but first calling
          `$super.initWithSpec`.

          Given a spec file that looks like:

          ````
          File's Owner: /Object

          Object:
            class: MyObject
            myProperty: 12
          ````

          A custom init method might look like this:

          ````
          JSClass("MyObject", JSObject, {

            myProperty: 0

            initWithSpec: function(spec){
              MyObject.$super.initWithSpec.call(this, spec);
              this.myProperty = spec.valueForKey("myProperty");
            }

          });
          ````

          Implicit Classes
          =============
          If an object in the spec file has a `class`() property, that will
          be used to create an object instance.

          However, in many cases the class of a property is known and is alwyas
          the same.

          For these cases, you can specify a default class when calling
          `valueForKey`(JSSpec.valueForKey).

          In this case, a color object is created.

          ````
          File's Owner: /Object

          Object:
            class: MyObject
            myColor:
              rgba: 123,234,12
          ````

          ````
          JSClass("MyObject", JSObject, {

            myColor: 0

            initWithSpec: function(spec){
              MyObject.$super.initWithSpec.call(this, spec);
              this.myColor = spec.valueForKey("myColor", JSColor);
            }

          });
          ````

          Nested Objects
          ====

          If your property is an object, the returned value from
          `valueForKey()`(JSSpec.valueForKey) will be another `JSSpec` object
          scoped to the key you requested.

          ````
          File's Owner: /Object

          Object:
            class: MyObject
            myObject:
              property1: Hello
              property2: 42
          ````

          ````
          JSClass("MyObject", JSObject, {

            initWithSpec: function(spec){
              MyObject.$super.initWithSpec.call(this, spec);
              var myObject = spec.valueForKey("myObject");
              var property1 = myObject.valueForKey("property1");
              var property2 = myObject.valueForKey("property2");
            }

          });
          ````

          Arrays
          ====

          If your property is an array, the returned value from
          `valueForKey()`(JSSpec.valueForKey) will be another `JSSpec` object
          scoped to the array you requested.

          The scoped spec has a `length`(JSSpec.length) property, and you can iterate similar
          to an actual array

          ````
          File's Owner: /Object

          Object:
            class: MyObject
            myList:
              - Mercury
              - Venus
              - Earth
          ````

          ````
          JSClass("MyObject", JSObject, {

            initWithSpec: function(spec){
              MyObject.$super.initWithSpec.call(this, spec);
              var list = spec.valueForKey("myList");
              for (var i = 0, l = list.length; i < l; ++i){
                var item = list.valueForKey(i);
              }
            }

          });
          ````

          See `JSSpec` for more details on what kind of values can be
          resolved.
        arguments:
          - 
            name: spec
            type: JSSpec
            summary: The spec in which the object is described
      -
        name: initWithSpecName
        kind: init
        summary: Loads a `JSSpec` resource for the given name, and returns its
          `filesOwner` property.
        description: |
          While the name is similar to `initWithSpec`, this method is simply
          a convenience method that loads a `JSSpec` and returns its `filesOwner`
          document.

          While you could always call this method on `JSObject`, for code clarity
          we recommend using the class you intend to instantiate.  Doing so also helps
          ensure you receive the correct object because the implementation includes
          a check that the spec's file's owner is an instance of the class you use
          to make the call.
        type: JSObject
        return: The file's owner from the given spec resource, or `null` if the owner
          is not an instance of the calling class
        arguments:
          -
            name: specName
            type: String
            summary: The name of the spec resource to load
          -
            name: bundle
            type: JSBundle
            default: JSBundle.mainBundle
            summary: The bundle in which to look for the spec resource
      - 
        name: awakeFromSpec
        kind: method
        summary: Called after the object has been initialized from a spec file
        description: |
          Can be used to perform extra intialization tasks when creating an
          object from a spec file
      -
        name: Spec File Properties
        kind: spec
        summary: Description of properties that can be included in a spec file
        description: |
          The base `JSObject` class can initialize only generic "outlet" properties,
          which are arbitrary objects, and bindings to other objects.

          More sophisticated intialization from spec files is left to subclasses
          to implement given their own needs.

          Often property names and types in the spec file will match property names
          and types on the class itself, but occasionally special cases can be
          made in the spec properties that makes writing specs faster and clearer.
        topics:
          -
            name: Generic
            members:
              -
                name: class
                type: String
                summary: The name of the class to instantiate
                description: |
                  The class name lets the spec file parser know which kind
                  of class to instantiate.

                  The name must be resolvable by `JSClass.FromName()`.

                  Implicit Classes
                  ----------------
                  When instantiating objects from a spec file, it's often
                  clear what the classes of many objects should be.

                  For example, when a `UIView` is looking at its spec properties
                  it knows that the `backgroundColor` property should resovle
                  to a `JSColor`.

                  ````
                  MainView:
                    class: UIView
                    backgroundColor:
                      class: JSColor
                      rgba: 245,245,250
                  ````

                  Since the view knows to expect only a `JSColor`, it tells
                  tell the spec parser to assume `JSColor` unless otherwise
                  specified.

                  So the spec could instead be written without an explicit
                  `class` for the `backgroundColor` property.

                  ````
                  MainView:
                    class: UIView
                    backgroundColor:
                      rgba: 245,245,250
                  ````

                  Custom Subclasses
                  -----------------
                  If most views know what classes their properties should be,
                  why do we even need the `class` entry in the spec file?

                  So you can specify a custom subclass.

                  Expanding the example above, lets add a view controller:

                  ````
                  ViewController:
                    view: /MainView

                  MainView:
                    backgroundColor:
                      rgba: 245,245,250
                  ````

                  This works perfectly fine without specifying the `class` for
                  `MainView`, because `UIViewController` knows to use `UIView`
                  as the default class for its `UIViewController.view` property.

                  But if `MainView` is actually a view subclass, like a
                  scroll view, then `class` must be specified:

                  ````
                  ViewController:
                    view: /MainView

                  MainView:
                    class: UIScrollView
                    backgroundColor:
                      rgba: 245,245,250
                  ````
              -
                name: outlets
                type: dictionary
                summary: Create links between objects without custom init code, typically reserved for
                  things like properties on your custom view controllers.
                description: |
                  Using `outlets` is a shortcut instead of requiring subclasses
                  to implement `initWithSpec()` to do special spec inspection for simple
                  property sets.

                  Common reusable components will typically not make use of `outlets`, in
                  favor of defining their own custom spec properties and providing a
                  custom `initWithSpec()` implementation to read those properties.

                  Often used for setting properties on custom view controllers, as in:

                  ````
                  File's Owner: /ViewController

                  ViewController:
                    class: MyViewController
                    view:
                      subviews:
                        - /NameField
                        - /AvatarImageView
                        - /HelpLabel
                    outlets:
                      nameField: /NameField
                      avatarView: /AvatarImageView

                  NameField:
                    class: UITextField

                  AvatarImageView:
                    class: UIImageView

                  HelpLabel:
                    class: UILabel
                    text: Help
                  ````

                  `nameField` and `avatarView` will be automatically set during
                  spec initialization, without any need for `MyViewController`
                  to code its own `initWithSpec()` method.

                  Assuming a view controller class such as

                  ````
                  JSClass("MyViewController", UIViewController, {

                    nameField: null,
                    avatarView: null

                  });
                  ````
                note: |
                  While it may seem tempting to always use `outlets` instead of
                  writing custom `initWithSpec()` methods, custom intialization
                  is useful:

                  1. When the names/values in the spec need to be maniuplated to match the class's properties
                  1. For documentation purposes, so custom spec properties are clearly listed and described
          -
            name: Bindings
            members:
              -
                name: bindings
                type: dictionary
                summary: Create bindings between this object and others
                description: |
                  Each key in the `dictionary` is passed as the first agument (`binding`) in a `bind()` call.

                  If the value for a key is an object, a single binding is made.

                  If the value for a key is an array, multiple binding calls are made,
                  as described in [Binding & Observing](Binding).

                  Each binding is specified by an object with these properties:

                  * `to`: A `JSObject` that will be passed as the second argument
                    (`toObject`) in the `bind()` call
                  * `value`: A `string` that will be passed as the third argument
                    (`keyPath`) in the `bind()` call.  Can include shorthand prefix
                    or suffix for specifying a value transformer (see [Binding & Observing](Binding)).
                  * `transformer`: An optional `object` representing a value transformer instance,
                    if the transformer cannot be specified via the shorthand syntax in `value`

                  An example binding could be:

                  ````
                  File's Owner: /ViewController

                  ViewController:
                    class: MyViewController
                    view:
                      subviews:
                        - /NameField

                  NameField:
                    class: UITextField
                    bindings:
                      text: {to: /ViewController, value: "person.name"}
                      enabled:
                        - {to: /ViewController, value: "person !== null"}
                        - {to: /ViewController, value: "!isSaving"}
                  ````

                  Assuming a view controller class such as

                  ````
                  JSClass("MyViewController", UIViewController, {

                    person: null,
                    isSaving: false

                  });
                  ````
  -
    name: Class Inspection
    members:
      -
        name: $class
        type: JSClass
        summary: The `JSClass` of which this object in an instance
      -
        name: isKindOfClass
        kind: method
        type: boolean
        summary: Check if the object is an instance of the given class or one
          of its subclasses
        return: "`true` if the object is an instance of the given class, `false` otherwise"
        description: |
          While good class design generally leverages polymorphism so calling
          code doesn't need to distinguish between subclasses, in rare cases it
          can be useful to know exactly which kind of class an object is.

          In other cases, lack of argument overloading in JavaScript can be
          overcome by using dynamic type checking in a function to mimic the
          kind of overloading that is possible in other languages.
        note: |
          You can also use the `instanceof` operator to perform the same
          check, which can be convenient in situations where you don't even
          know if the arg is a `JSObject` with a `isKindOfClass` member to call.
        arguments:
          -
            name: referenceClass
            type: JSClass
            summary: The class for which this object may be an instance
  -
    name: Object Identification
    members:
      -
        name: objectID
        type: int
        summary: A unqiue identifier for the object
        description: |
          You can use an object's unique identifier as a key in dictionaries.

          No two objects will be assigned the same identifier.
      -
        name: isEqual
        kind: method
        summary: Test if the object is equal to another
        description: |
          The default behavior returns `true` only if the given object is
          identical, `===`, to this object.

          Subclasses may override this method to provide a less strict equality
          comparison based on properties of the objects.
        type: bool
        return: \`true` if the objects are identical, `false` otherwise
        arguments:
          -
            name: other
            type: JSObject
            summary: The object to compare with
  -
    name: Binding & Observing
    members:
      - Binding
      -
        name: bind
        kind: method
        summary: Bind a local property to the given object + keyPath
        description: |
          Create a one- or two-way link between a property on this object and
          the property on another object.

          See [Binding & Observing](Binding) for an introduction to binding.

          Typically you'll call this method on something like a UI component,
          and bind to the property of an object held by a controller.
        arguments:
          -
            name: binding
            type: String
            summary: The name of the binding, which is typically a property name
              of this object
          -
            name: toObject
            type: JSObject
            summary: The object from which to read a value, often a controller
              object that in turn holds a data model.
          -
            name: keyPath
            type: String
            summary: A dot-separated key path that specifies which property
              to read on `toObject` (or one of its child objects)
          -
            name: options
            type: dictionary
            default: "undefined"
            summary: |
              Options for the binding

              * `valueTransformer` - A simple `object` that contains a
                `transformedValue()` method.  Several standard options
                exist such as `JSIsNullValueTransformer` or `JSIsNotEmptyValueTransformer`
      -
        name: unbind
        kind: method
        summary: Detach a binding that was previously added with `bind()`
        description: |
          Removes any binding previously made with the given name
        arguments:
          -
            name: binding
            type: String
            summary: The name of the binding used during the `bind()` call
      -
        name: addObserverForKeyPath
        kind: method
        summary: Register the given observer object to receive notifications
          when the value for the given keyPath changes.
        description: |
          A keyPath is a simple property name referring to a property on this
          object, or a dot-separated property name referring to a property on
          a descendant object.

          If a dot-separated keypath is provided, an observer will be registered
          on each object down the chain, and will be automatically adjusted
          if any object in the chain changes.
        note: |
          Calling multiple times with the same observer and keyPath will result
          in mutliple callbacks to the observer when the keyPath changes.
        arguments:
          -
            name: observer
            type: JSObject
            summary: The object that will receive change notifications
          -
            name: keyPath
            type: String
            summary: The dot-separated keyPath corresponding to the observed value
          -
            name: options
            default: "undefined"
            type: object
            summary: Options that control how the observation behaves
          -
            name: context
            default: "undefined"
            type: any
            summary: An object or value that will be provided in the notification
              callback, allowing the observer to identify and distinguish the
              notification if needed
      -
        name: removeObserverForKeyPath
        kind: method
        summary: Deregister the given observer from receiving notifications when
          then value of the given keyPath changes.
        description: |
          Should be called with an observer that was previously registered using
          `addObserverForKeyPath()`
        note: |
          If an observer+keyPath pair was registered multiple times, all will be
          de-registered if `context` is not given.  If `context` is given, only
          the registration with the matching context will be removed.
        arguments:
          -
            name: observer
            type: JSObject
            summary: The object that is receiving change notifications
          -
            name: keyPath
            type: String
            summary: The dot-separated keyPath corresponding to the observed value
          -
            name: context
            default: "undefined"
            summary: An object that was passed to addObserverForKeyPath, only
              required to deregister a single matching observer+keyPath pair,
              if there are multiple.
      -
        name: observeValueForKeyPath
        kind: method
        summary: Called when an observed value changes
        description: |
          ````
          JSClass("MyObject", JSObject, {

            observedValue: 0,

            observeValueForKeyPath: function(keyPath, ofObject, change, context){
              this.observedValue = ofObject.valueForKeyPath(keyPath);
            }

          });

          JSClass("MyObserver", JSObject, {

            myProperty: 1

          });

          var observer = MyObserver.init();
          var obj = MyObject.init();
          obj.addObserverForKeyPath("myProperty", observer);
          obj.myProperty = 2;
          // observer.observedValue == 2
          ````
        arguments:
          -
            name: keyPath
            type: String
            summary: The dot-separated keyPath corresponding to the value that changed
          -
            name: ofObject
            type: JSObject
            summary: The object holding the value that changed
          -
            name: change
            type: object
            summary: A description of the change that occurred
          -
            name: context
            type: any
            summary: The exact `context` object/value that was provided in
              \`addObserverForKeyPath`
  -
    name: Actions
    members:
      -
        name: canPerformAction
        kind: method
        type: boolean
        summary: Checks if the object can perform the named action
        description: |
          The default implementation returns `true` if the object has an
          instance method matching the action name.
        see:
          - UIApplication.sendAction