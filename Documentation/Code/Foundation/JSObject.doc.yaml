kind: class
summary: The base class for all other JSKit classes, providing common
  functionality such as binding and observers.
description: |
  `JSObject` the root class in the JSKit class hierarchy.

  All objects extending from `JSObject` inherit the ability to participate
  in value binding and observing, along with class inspection methods.
topics:
  -
    name: Creating a JSObject
    members:
      -
        name: init
        kind: init
        summary: Create an empty object
        note: |
          Every subclass inherits this default init method.

          However, since this method does absolutely nothing, subclasses
          *do not* need to call `$super.init` if they override this method
          or if they declare a different init method.

          Properties such as `objectID` are always initialized during object
          construction, even if this init method is not called.
      -
        name: initWithSpec
        kind: init
        summary: Initialize an object with the values extracted from part of
          a spec file
        description: |
          A `JSSpec` is a serialized dictionary of properties that describes a
          collection of objects.

          When an object is requested from the spec, via `JSSpec.resolveValue()`,
          the object will be initialized using this init method.

          Typically a class will implement its own version of this method
          to initialize properties from the spec, but first calling
          `$super.initWithSpec`.

          Given a spec file that looks like:

          ````
          File's Owner: /Object

          Object:
            class: MyObject
            myProperty: 12
          ````

          A custom init method might look like this:

          ````
          JSClass("MyObject", JSObject, {

            myProperty: 0

            initWithSpec: function(spec, values){
              MyObject.$super.initWithSpec.call(this, spec, values);
              this.myProperty = values.myProperty;
            }

          });
          ````

          However, some property initialization is more complex and requires
          using the spec to resolve more values.

          In this case, a color object is created.

          ````
          File's Owner: /Object

          Object:
            class: MyObject
            myColor:
              rgba: 123,234,12
          ````

          ````
          JSClass("MyObject", JSObject, {

            myColor: 0

            initWithSpec: function(spec, values){
              MyObject.$super.initWithSpec.call(this, spec, values);
              this.myColor = spec.resolveValue(values.myColor, "JSColor");
            }

          });
          ````

          See `JSSpec` for more details on what kind of values can be
          resolved.
        arguments:
          - 
            name: spec
            type: JSSpec
            summary: The spec in which the object is described
          - 
            name: values
            type: object
            summary: The dictionary that the describes the object in the spec
      -
        name: initWithSpecName
        kind: init
        summary: Loads a `JSSpec` resource for the given name, and returns its
          `filesOwner` property.
        description: |
          While the name is similar to `initWithSpec`, this method is simply
          a convenience method that loads a `JSSpec` and returns its `filesOwner`
          document.

          While you could always call this method on `JSObject`, for code clarity
          we recommend using the class you intend to instantiate.  Doing so also helps
          ensure you receive the correct object because the implementation includes
          a check that the spec's file's owner is an instance of the class you use
          to make the call.
        type: JSObject
        return: The file's owner from the given spec resource, or `null` if the owner
          is not an instance of the calling class
        arguments:
          -
            name: specName
            type: string
            summary: The name of the spec resource to load
      - 
        name: awakeFromSpec
        kind: method
        summary: Called after the object has been initialized from a spec file
        description: |
          Can be used to perform extra intialization tasks when creating an
          object from a spec file
  -
    name: Class Inspection
    members:
      -
        name: $class
        type: JSClass
        summary: The `JSClass` of which this object in an instance
      -
        name: isKindOfClass
        kind: method
        type: boolean
        summary: Check if the object is an instance of the given class or one
          of its subclasses
        return: "`true` if the object is an instance of the given class, `false` otherwise"
        description: |
          While good class design generally leverages polymorphism so calling
          code doesn't need to distinguish between subclasses, in rare cases it
          can be useful to know exactly which kind of class an object is.

          In other cases, lack of argument overloading in JavaScript can be
          overcome by using dynamic type checking in a function to mimic the
          kind of overloading that is possible in other languages.
        note: |
          You can also use the `instanceof` operator to perform the same
          check, which can be convenient in situations where you don't even
          know if the arg is a `JSObject` with a `isKindOfClass` member to call.
        arguments:
          -
            name: referenceClass
            type: JSClass
            summary: The class for which this object may be an instance
  -
    name: Object Identification
    members:
      -
        name: objectID
        type: int
        summary: A unqiue identifier for the object
        description: |
          You can use an object's unique identifier as a key in dictionaries.

          No two objects will be assigned the same identifier.
  -
    name: Binding & Observing
    members:
      -
        name: addObserverForKeyPath
        kind: method
        summary: Register the given observer object to receive notifications
          when the value for the given keyPath changes.
        arguments:
          -
            name: observer
            type: JSObject
            summary: The object that will receive change notifications
          -
            name: keyPath
            type: string
            summary: The dot-separated keyPath corresponding to the observed value
          -
            name: options
            default: null
            type: object
            summary: Options that control how the observation behaves
          -
            name: context
            default: null
            type: any
            summary: An object or value that will be provided in the notification
              callback, allowing the observer to identify and distinguish the
              notification if needed
      -
        name: observeValueForKeyPath
        kind: method
        summary: Called when an observed value changes
        description: |
          ````
          JSClass("MyObject", JSObject, {

            observedValue: 0,

            observeValueForKeyPath: function(keyPath, ofObject, change, context){
              this.observedValue = ofObject.valueForKeyPath(keyPath);
            }

          });

          JSClass("MyObserver", JSObject, {

            myProperty: 1

          });

          var observer = MyObserver.init();
          var obj = MyObject.init();
          obj.addObserverForKeyPath("myProperty", observer);
          obj.myProperty = 2;
          // observer.observedValue == 2
          ````
        arguments:
          -
            name: keyPath
            type: string
            summary: The dot-separated keyPath corresponding to the value that changed
          -
            name: ofObject
            type: JSObject
            summary: The object holding the value that changed
          -
            name: change
            type: object
            summary: A description of the change that occurred
          -
            name: context
            type: any
            summary: The exact `context` object/value that was provided in
              \`addObserverForKeyPath`
