copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: 2020.1.0
inherits: JSObject
summary: An HTTP response
description: |
  HTTP responses are a combination of a `statusCode`, any number of
  `headers`, and some `data`

  A response object is typically created by the `JSURLSession` system
  and attached to a `JSURLRequest` object automatically.
topics:
  -
    name: Status
    members:
      -
        name: StatusCode
        kind: enum
        summary: Standard HTTP status codes
        suffix: enum
        options:
          -
            name: unknown
            value: "-1"
          -
            name: noResponse
            value: "0"
          -
            name: continue
            value: "100"
          -
            name: switchingProtocols
            value: "101"
          -
            name: ok
            value: "200"
          -
            name: created
            value: "201"
          -
            name: accepted
            value: "202"
          -
            name: nonAuthorativeInformation
            value: "203"
          -
            name: noContent
            value: "204"
          -
            name: resetContent
            value: "205"
          -
            name: partialContent
            value: "206"
          -
            name: multipleChoices
            value: "300"
          -
            name: movedPermanently
            value: "301"
          -
            name: found
            value: "302"
          -
            name: seeOther
            value: "303"
          -
            name: notModified
            value: "304"
          -
            name: useProxy
            value: "305"
          -
            name: temporaryRedirect
            value: "306"
          -
            name: badRequest
            value: "400"
          -
            name: unauthorized
            value: "401"
          -
            name: paymentRequired
            value: "402"
          -
            name: forbidden
            value: "403"
          -
            name: notFound
            value: "404"
          -
            name: methodNotAllowed
            value: "405"
          -
            name: notAcceptable
            value: "406"
          -
            name: proxyAuthenticationRequired
            value: "407"
          -
            name: requestTimeout
            value: "408"
          -
            name: conflict
            value: "409"
          -
            name: gone
            value: "410"
          -
            name: lengthRequired
            value: "411"
          -
            name: preconditionFailed
            value: "412"
          -
            name: payloadTooLarge
            value: "413"
          -
            name: uriTooLong
            value: "414"
          -
            name: unsupportedMediaType
            value: "415"
          -
            name: rangeNotSatisfiable
            value: "416"
          -
            name: expectationFailed
            value: "417"
          -
            name: upgradeRequired
            value: "426"
          -
            name: internalServerError
            value: "500"
          -
            name: notImplemented
            value: "501"
          -
            name: nadGateway
            value: "502"
          -
            name: serviceUnavailable
            value: "503"
          -
            name: gatewayTimeout
            value: "504"
          -
            name: httpVersionNotSupported
            value: "505"
      -
        name: StatusClass
        kind: enum
        suffix: enum
        summary: Standard HTTP status classes, mapped to the first digit of the
          status code
        options:
          -
            name: unknown
            summary: The status code is unknown
            value: "-1"
          -
            name: noResponse
            summary: The status code indicates no response was received
            value: "0"
          -
            name: informational
            summary: Any 1xx status code
            value: "1"
          -
            name: success
            summary: Any 2xx status code
            value: "2"
          -
            name: redirect
            summary: Any 3xx status code
            value: "3"
          -
            name: clientError
            summary: Any 4xx status code
            value: "4"
          -
            name: serverError
            summary: Any 5xx status code
            value: "5"
      -
        name: statusCode
        type: Number
        summary: The HTTP status code for the response, can be compared to
          \`StatusCode`
      -
        name: statusClass
        type: Number
        summary: The HTTP status class for the response, can be compared to
          \`StatusClass`
        description: |
          The status class is useful when doing high level filtering of
          response status codes.

          For example, since any 2xx status code indicates success, you
          can check for any 2xx response using statusClass instead of
          checking for each possible status (`200`, `201`, etc.):

          ````
          if (response.statusClass === JSURLResponse.StatusClass.success){

          }
          ````
      -
        name: statusText
        type: String
        summary: The HTTP status text for the response, specified after the
          code
  -
    name: Headers
    members:
      -
        name: headerMap
        type: JSMIMEHeaderMap
        summary: An object to read header values
        description: |
          A header map object can easily access headers
          based on a name.
      -
        name: headers
        type: JSMIMEHeader[]
        summary: An ordered list of headers
  -
    name: Response Data
    members:
      -
        name: contentType
        type: JSMediaType
        summary: The content type of the response data
      -
        name: data
        type: JSData
        summary: The raw byte array response data
      -
        name: object
        type: object
        summary: An object created by parsing the `data` as JSON
        description: |
          In order for an object to be parsed, the response must:
          1. Have a `contentType` set to `"application/json"`
          2. Have a charset of `"utf-8"`
          3. Be valid JSON