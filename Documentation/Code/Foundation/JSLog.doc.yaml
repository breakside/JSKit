copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: 2020.1.0
summary: A logger that can be used for error reporting, telemetry, and debugging
description: |
  A robust logger that can capture critical information to help you find and
  fix bugs.

  Every logger starts with a unique identifier called a `subsystem`.  An
  optional `category` within the subsystem can also be specified to allow for
  further filtering of log events.

  Typically you'll create a logger in each file, but mutliple files can use the
  same `subsystem` and `category`.

  ````
  // #import UIKit
  'use strict';

  (function(){

  var logger = JSLog("io.breakside.MessagesWeb", "views");

  class MessagesViewController extends UIViewController{

    viewWillAppear(animated){
      logger.debug("View will appear: %b", animated);
    }

    sendMessage(message){
      logger.info("Sending message: %d", message.id);
      try{
        // call API to send message...
      }catch (e){
        logger.error("Failed to send message: %{error}", e);
      }
    }

  }

  MessagesViewController.initialize();

  })();

  ````

  *Note: in this example we've created a private function scope in order to
  create the file-wide variable named `logger`.  This is only necessary in
  a browser context.  Node.js automatically scopes each file.*

  Log Levels
  ==========

  A log message can be sent at one of five `Level`s:

  1. error
  2. warn
  3. log
  4. info
  5. debug

  There are methods on a `JSLog` object corresponding to each level.

  Formatting Log Messages
  =======================

  Log messages can include format strings similar in concept, but not exactly
  like `String.sprintf`.

  The format is not calculated immediately, which helps ensure that the log
  handler affects code performance by as little as possible.

  To prevent unintentional logging of personal information, `JSLog` uses
  a custom formatter that doesn't have the standard `%s` placeholder,
  which could easily leak things like names and passwords.

  Logging methods support the following format placeholders:

  - `%d` - An integer number
  - `%x` - An integer number in hex
  - `%d` - An integer number in uppercase hex
  - `%f` - An decimal number
  - `%b` - An boolean value
  - `%t` - A timestamp in seconds
  - `%{error}` - An exception with message and backtrace
  - `%{public}` - A string, emphasizing that only public information
    should be logged

  Log Messages Handlers
  =====================

  Each log level can have its own set of custom log handlers.

  For example, error log messages could be sent to a service like Rollbar
  to coordinate and consolidate errors across all users.
topics:
  -
    name: Creating a Logger
    members:
      -
        name: JSLog
        kind: constructor
        summary: Create a logger with identification information
        description: |
          Typically you'll create a logger variable within the scope of a file.
          Multiple files can reference the same `subsystem` and `category`.
        arguments:
          -
            name: subsystem
            type: String
            summary: A unique identifier for the part of the application the
              logger applies to
          -
            name: category
            type: String
            summary: A more specific identifier within the `subsystem`
  -
    name: Logging
    members:
      -
        name: debug
        kind: method
        summary: Log a message at the lowest priority level
        description: |
          If `message` is a format string, the following format placeholders
          are supported:

          - `%d` - An integer number
          - `%x` - An integer number in hex
          - `%d` - An integer number in uppercase hex
          - `%f` - An decimal number
          - `%b` - An boolean value
          - `%t` - A timestamp in seconds
          - `%{error}` - An exception with message and backtrace
          - `%{public}` - A string, emphasizing that only public information
            should be logged
        arguments:
          -
            name: message
            type: String
            summary: The log message, perhaps with format placeholders
          -
            name: args
            type: any
            variable: true
            summary: The values to format, if any
      -
        name: info
        kind: method
        summary: Log a message at the `Level.info` priority
        description: |
          If `message` is a format string, the following format placeholders
          are supported:

          - `%d` - An integer number
          - `%x` - An integer number in hex
          - `%d` - An integer number in uppercase hex
          - `%f` - An decimal number
          - `%b` - An boolean value
          - `%t` - A timestamp in seconds
          - `%{error}` - An exception with message and backtrace
          - `%{public}` - A string, emphasizing that only public information
            should be logged
        arguments:
          -
            name: message
            type: String
            summary: The log message, perhaps with format placeholders
          -
            name: args
            type: any
            variable: true
            summary: The values to format, if any
      -
        name: log
        kind: method
        summary: Log a message at the normal priority level
        description: |
          If `message` is a format string, the following format placeholders
          are supported:

          - `%d` - An integer number
          - `%x` - An integer number in hex
          - `%d` - An integer number in uppercase hex
          - `%f` - An decimal number
          - `%b` - An boolean value
          - `%t` - A timestamp in seconds
          - `%{error}` - An exception with message and backtrace
          - `%{public}` - A string, emphasizing that only public information
            should be logged
        arguments:
          -
            name: message
            type: String
            summary: The log message, perhaps with format placeholders
          -
            name: args
            type: any
            variable: true
            summary: The values to format, if any
      -
        name: warn
        kind: method
        summary: Log a message at the `Level.warn`
        description: |
          If `message` is a format string, the following format placeholders
          are supported:

          - `%d` - An integer number
          - `%x` - An integer number in hex
          - `%d` - An integer number in uppercase hex
          - `%f` - An decimal number
          - `%b` - An boolean value
          - `%t` - A timestamp in seconds
          - `%{error}` - An exception with message and backtrace
          - `%{public}` - A string, emphasizing that only public information
            should be logged
        arguments:
          -
            name: message
            type: String
            summary: The log message, perhaps with format placeholders
          -
            name: args
            type: any
            variable: true
            summary: The values to format, if any
      -
        name: error
        kind: method
        summary: Log a message at the highest priority level
        description: |
          If `message` is a format string, the following format placeholders
          are supported:

          - `%d` - An integer number
          - `%x` - An integer number in hex
          - `%d` - An integer number in uppercase hex
          - `%f` - An decimal number
          - `%b` - An boolean value
          - `%t` - A timestamp in seconds
          - `%{error}` - An exception with message and backtrace
          - `%{public}` - A string, emphasizing that only public information
            should be logged
        arguments:
          -
            name: message
            type: String
            summary: The log message, perhaps with format placeholders
          -
            name: args
            type: any
            variable: true
            summary: The values to format, if any
      -
        introduced: 2020.35.0
        name: multiline
        kind: method
        summary: Log each line of a multiline message
        arguments:
          - 
            name: level
            type: Level
            summary: The level to use
          -
            name: message
            type: String
            summary: The multiline message
      -
        name: Level
        kind: enum
        summary: The logging priority levels
        topics:
          -
            name: Options
            members:
              -
                name: debug
                summary: The lowest priority.  Only recommended for development
                  debugging.
              -
                name: info
                summary: The second-lowest priority.
              -
                name: log
                summary: The default priority.
              -
                name: warn
                summary: The second-highest priority.  Recommended for log messages
                  that require attention but are not critical.
              -
                name: error
                summary: The highest priority.  Used for logging exceptions or
                  other critical error conditions.
  -
    name: Configuration
    members:
      -
        name: any
        type: String
        summary: Constant that can be used instead of a specific subsystem or
          category when configuring logging
      -
        name: configure
        kind: method
        static: true
        summary: Configure the log behavior at for the given logger and level
        arguments:
          -
            name: options
            type: Congfiguration
            summary: The configuration options to set
          -
            name: level
            type: Level
            summary: The level to configure
          -
            name: subsystem
            type: String
            default: JSLog.any
            summary: The subsystem to configure
          -
            name: category
            type: String
            default: JSLog.any
            summary: The category to configure
        description: |
          Unspecified configuration properties will be left unchanged.
      -
        name: Congfiguration
        kind: dictionary
        summary: Log configuration options
        topics:
          -
            name: Properties
            members:
              -
                name: enabled
                type: boolean
                summary: Determines whether any logs are captured at this level
              -
                name: print
                type: boolean
                summary: Whether to print to the `console`
              -
                name: console
                type: Console
                summary: A `Console`-like object that has a method corresponding
                  to each log level.
                description: |
                  Can be used to route printed logs to a file or location
                  other than the built-in debug console
  -
    name: Custom Handlers
    members:
      -
        name: addHandler
        kind: method
        static: true
        summary: Add a custom log handler object for the given logger and level
        arguments:
          -
            name: handler
            type: JSLogHandler
            summary: The custom handler
          -
            name: level
            type: Level
            summary: The level to configure
          -
            name: subsystem
            type: String
            default: JSLog.any
            summary: The subsystem to configure
          -
            name: category
            type: String
            default: JSLog.any
            summary: The category to configure
      -
        name: addHandler
        kind: method
        suffix: function
        static: true
        summary: Add a custom log handler function for the given logger and level
        arguments:
          -
            name: handler
            type:
              arguments:
                -
                  name: record
                  type: JSLogRecord
                  summary: The log record to handle
            summary: The custom handler function
          -
            name: level
            type: Level
            summary: The level to configure
          -
            name: subsystem
            type: String
            default: JSLog.any
            summary: The subsystem to configure
          -
            name: category
            type: String
            default: JSLog.any
            summary: The category to configure
      -
        name: JSLogRecord
        kind: class
        anonymous: true
        summary: A single loggged record
        topics:
          -
            name: Properties
            members:
              -
                name: level
                type: Level
                summary: The record's level
              -
                name: timestamp
                type: Number
                summary: A unix timestamp in seconds since 1970
              -
                name: subsystem
                type: String
                summary: The subsystem of the logger that created the record
              -
                name: category
                type: String
                summary: The category of the logger that created the record
              -
                name: message
                type: String
                summary: The log message, with possible format placeholders
              -
                name: args
                type: any[]
                summary: The message format arguments
      -
        name: JSLogHandler
        kind: protocol
        summary: An interface for custom log handlers
        topics:
          -
            name: Logging
            members:
              -
                name: handleLog
                kind: method
                summary: Handle a single log record
                arguments:
                  -
                    name: record
                    type: JSLogRecord
                    summary: The log record to handle
  -
    name: Formatting
    members:
      -
        name: format
        kind: method
        static: true
        type: String
        summary: Format a single log record
        arguments:
          -
            name: record
            type: JSLogRecord
            summary: The record to format
      -
        name: formatted
        kind: method
        static: true
        type: String[]
        summary: Format a list of log records into a list of strings
        arguments:
          -
            name: records
            type: JSLogRecord[]
            summary: The records to format
  -
    name: Record Memory
    members:
      -
        name: getRecords
        kind: method
        static: true
        type: JSLogRecord[]
        summary: Get a list of recent log records across all levels
        description: |
          It's often useful when logging crashes or errors to include
          a recent history of logs to provide context for the error.

          By default, `JSLog` keeps a memory of the 100 most recent log records.