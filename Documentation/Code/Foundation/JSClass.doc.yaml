copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: 2020.1.0
summary: A function that creates JSKit classes and serves as the base type
  for all JSKit classes.
description: |

  Background
  ==========
  
  As a language, JavaScript has never had a full class syntax.  Even the advent
  of `class` in EcmaScript 6 leaves a bit to be desired.

  As a result, JSKit is designed with its own class model to help make it easier
  to define and use classes in JavaScript.  Crucially, however, the JSKit class
  model is designed work seamlessly with the standard class model in JavaScript.

  For starters, `JSClass` itself is a function that is used to create new classes:

  ````
  JSClass("Person", JSObject, {

    initWithFullName: function(name){
      var names = name.split(' ');
      this.initWithNames(names[0], names.slice(1).join(' '));
    },

    initWithNames: function(first, last){
      this.firstName = first;
      this.lastName = last;
    },

    firstName: null,
    lastName: null,
    fullName: JSReadOnlyProperty(),

    getFullName: function(){
      return this.firstName + ' ' + this.lastName;
    }

  });
  ````

  Here, we've defined a `Person` class that inherits from `JSObject`.  It includes:

  * Two constructors, or "init methods" in JSKit-speak.
  * Two regular properties (`firstName`, `lastName`)
  * One read-only property, `fullName`, that is access via a getter, `getFullName`

  Constructors
  ============

  Classes often have multiple ways of constructing instance objects, but JavaScript
  `class` syntax only provides a single constructor for every class.

  A common workaround is to have the constructor take an `options` object that
  can have a varieity of properties depending on the desired construction.

  `JSClass` takes a different approach by using "init methods" to construct
  object instances.  The end result is more readable and understandable code,
  both on the class declararation side and the calling side.

  ````
  var person = Person.initWithNames("Test", "User")
  ````

  *It's important to note that while init methods are declared just like any
  other instance method, they are treated differently by `JSClass` and are
  automatically added as static class methods that first create an object
  from the class prototype and then call the init method as an instance method.*

  Failable Constructors & Factories
  ---------------------------------

  Another advangate of init methods over standard constructors is that they can
  return `null`, making them failable.

  If an init method doesn't return anything (technically, if its return value
  is `undefined`) then the calling code receives the newly created object.

  However, if an init method returns something, even `null`, that value will be
  returned to the calling code.

  This allows for not just failable constructors, but also for factory init methods,
  useful for abstract base classes that return concrete subclasses.

  Here's an example of an abstract image reader class with a failable factory
  init method.

  ````
  JSClass("ImageReader", JSObject, {

    initFromFile: function(file){
      if (file.ext == '.png'){
        return PNGReader.initWithFile(file);
      }
      if (file.ext == '.jpg'){
        return JPGReader.initWithFile(file);
      }
      return null;
    }

  });

  JSClass("PNGReader", ImageReader, {

    initWithFile: function(file){
      // ...
    }

  });

  JSClass("JPGReader", ImageReader, {

    initWithFile: function(file){
      // ...
    }

  });
  ````

  Properties
  ==========

  Where JavaScript really falls down is with defining properties.

  In JSKit, there are basic properties, which you define as simple name/default-value
  pairs:

  ````
    firstName: null
  ````

  But there are also properies such as `JSDynamicProperty`, `JSReadOnlyProperty`,
  and `JSLazyInitProperty` that are defined by calling a function like:

  ````
    fullName: JSReadOnlyProperty()
  ````

  When `JSClass` runs, it looks for these special properties and automatically
  wires up getters, setters, or whatever else is needed.  It ends up being a lot
  easier and cleaner than messing with `Object.defineProperty` yourself.

  Super
  =====

  Calling methods from parent classes is a hassle if you're not using the `class`
  syntax, so `JSClass` makes it easy to get a reference to the superclass:

  ````
  JSClass("Doctor", Person, {

    getFullName: function(){
      var name = Doctor.$super.getFullName.call(this);
      return "Dr. " + name;
    }

  });
  ````

  The `.call(this)` business makes use of JavaScript's standard `Function.call`
  feature, calling the superclass method with ourself as the `this` object.

  If you need to pass arguments, just add them after the `this`:

  ````
  SomeClass.$super.someMethod.call(this, arg1, arg2);
  ````

  Using Native Class Syntax
  =========================

  The `JSClass` system is designed to be completely compatible with the native
  `class` syntax in JavaScript.

  Here's an example of the `Person` class from before, but rewritten using
  native `class` sytax:

  ````
  class Person extends JSObject{

    initWithFullName(name){
      var names = name.split(' ');
      this.initWithNames(names[0], names.slice(1).join(' '));
    },

    initWithNames(first, last){
      this.firstName = first;
      this.lastName = last;
    },

    get fullName(){
      return this.firstName + ' ' + this.lastName;
    }

  }

  Person.initialize()
  ````

  The one critical bit that ties it all together is the `Person.initialize()`
  call at the end.  That one call allows you to use the init functions to
  construct `Person` instances.  It also registers the class so it can be
  found via `JSClass.FromName("Person")`.

  And More
  ========

  `JSClass` also serves as the base of all JSKit classes, and contains functionaility
  for inspecting the class hierarchy, looking up classes by name, and extending
  existing classes with mixins.
topics:
  -
    name: Creating Classes
    members:
      -
        kind: constructor
        summary: Create a new class
        return: The new class
        type: JSClass
        arguments:
          -
            name: className
            type: String
            summary: The name of the new class to create
          -
            name: superclass
            type: JSClass
            summary: The class from which the new class will inherit
          -
            name: extensions
            type: object
            summary: |
              A collection of properties and methods that the new class will contain

              The keys/values of this object will become properties of the
              class prototype, according to the following rules:

              * `function`s will be added as instance methods
              * `JSCustomProperty` values will be invoked to define their
                desired instance properties/methods
              * any other value will become an instance property with the
                given value functioning as a default
      -
        name: initialize
        kind: method
        summary: Setup any `init*` methods and register the class for lookup
        description: |
          This initialization method is called automatically as part of the
          `JSClass()` function call.

          However, if you're using class syntax, you'll need to call `initialize()`
          yourself.

          ````
          class MyObject extends JSObject{

            // ...

          }

          MyObject.initialize();
          ````
        important:
          This method must be called on any classes created using the class syntax
      -
        name: definePropertiesFromExtensions
        kind: method
        summary: Add more properties or methods to a class, similar to a mixin
        description: |
          Adding more properties or methods to an object can be a handy way of
          increasing functionality while maintaining clean object oriented
          patterns.

          Maybe a framework includes a definition of RGB color:

          ````
          // In a framework...

          JSClass("RGBColor", JSObject, {

            red: 0,
            green: 0,
            blue: 0,

            initWithRGB(red, green, blue){
              this.red = red;
              this.green = green;
              this.blue = blue;
            }
          });
          ````

          But in your application, you often want to convert from RGB to
          grayscale.  While you could make a standalone function called
          `rgbToGrayscale(rgbObject)`, extensions allow you to add a method
          right on the `RGBColor` object itself:

          ````
          // In your application...

          RGBColor.definePropertiesFromExtensions({
            getGrayscale: function(){
              return (this.red + this.blue + this.green) / 3;
            }
          });
          ````
        arguments:
          -
            name: extensions
            type: object
            summary: |
              The extra properties and methods to add to the class.

              The keys/values of this object will become properties of the
              class prototype, according to the following rules:

              * `function`s will be added as instance methods
              * `JSCustomProperty` values will be invoked to define their
                desired instance properties/methods
              * any other value will become an instance property with the
                given value functioning as a default
  -
    name: Class Identity
    members:
      -
        name: className
        type: String
        summary: The name of the class
        description: |
          Sometimes, such as in cases like serialization, it is much easier to
          pass around the name of a class rather than the class itself.

          This property provides a way to access the class name.

          If you have an instance object, you would lookup it's class name
          with a line like:

          ````
          this.$class.className
          ````
      -
        name: $super
        type: object
        summary: The `prototype` of the `JSClass` superclass of this class
        description: |
          In order to call superclass methods without this helper,
          you essentially need to invoke:

          ````
          superclass.prototype.someMethod.call(this, arg1, arg2);
          ````

          But this presents a couple of problems:

          * Where does the `superclass` reference come from?
          * It seems silly to have that `.prototype` part in there

          To work around these issues, JSKit defines a property on every
          `JSClass` that is a direct reference to the class's superclass
          prototype.

          Since `$super` is a reference on the subclass, you never need to
          hard-code the superclass name anywhere except when defining the
          class itself, which helps make it easier to refactor code.

          An example super call would look something like:

          ````
          JSClass("Person", JSObject, {
             
            initWithSpec: function(spec, values){
              Person.$super.initWithSpec.call(this, spec, values);
              // ...
            }
          });
          ````
      -
        name: isSubclassOfClass
        kind: method
        summary: Check if the class is a subclass of the given class
        return: \`true` if this class is a subclass of the given class, `false` otherwise
        type: boolean
        arguments:
          -
            name: referenceClass
            type: JSClass
            summary: The class to test against
  -
    name: Class Lookup
    members:
      -
        name: FromName
        kind: method
        static: true
        summary: Find the class with a name matching the given name
        description: |
          Sometimes, such as in cases like serialization or spec files, you'll
          need to pass around the name of a class rather than the class itself.

          This function provides a way to convert from that `string` name to the
          `JSClass` itself, so you can then call `init()` or whatever you need
          to do.
        return: The class matching the given name
        type: JSClass
        arguments:
          -
            name: className
            type: String
            summary: The name of the class to lookup, which should match the
              name given when you defined the class using `JSClass`.

              If you instead defined the class using `class` syntax, you'll
              need to call `initialize()` on your class to enable lookups.
  -
    name: Extending
    members:
      -
        name: $extend
        kind: method
        summary: Create a new class by extending this class
        description: |
          Not typically called directly, as `JSClass()` is the preferred way
          of creating new classes.

          Can be overridden by subclasses interested in doing some kind of
          automatic registration of their own subclasses, in support of a
          factory pattern.

          Here's an example of an image reader that can factory out specific
          subclasses depending on file etension:

          ````
          JSClass("ImageReader", JSObject, {
            ext: null,

            initFromFile: function(file){
              var subclass = ImageReader.subclassesByExt[file.ext];
              if (!subclass){
                return null;
              }
              return subclass.initWithFile(file);
            }
          });

          ImageReader.subclassesByExt = {};

          ImageReader.$extend = function(extensions, className){
            var subclass = this.$super.$extend.call(this, extensions, className);
            ImageReader.subclassesByExt[subclass.prototype.ext] = subclass;
            return subclass;
          };

          JSClass("PNGReader", ImageReader, {
            ext: 'png',

            initWithFile: function(file){
              // ...
            }
          });

          JSClass("JPGReader", ImageReader, {
            ext: 'jpg',

            initWithFile: function(file){
              // ...
            }
          });

          var file = getFileFromSomewhere();
          var obj = ImageReader.initFromFile(file);
          // obj will be a PNGReader if file.ext == 'png'
          //             a JPGReader if file.ext == 'jpg'
          ````
        arguments:
          -
            name: extensions
            type: object
            summary: A collection of properties and methods for the subclass
          -
            name: className
            type: String
            summary: The name for the new subclass

