copyright: Copyright Â© 2020 Breakside Inc.
name: JSSpec
kind: class
introduced: 2020.1.0
inherits: JSObject
summary: Creates objects from a serialized "spec" format
description: |
  `JSKit` focuses development on Javascript code only, but sometimes a
  declarative form of coding is more appropriate.

  When specifying user interfaces, for example, declaring the UI elements
  can often be clearer, easier, and faster than building up objects directly
  in Javascript.

  This is where spec files come in.  Spec is short for specification.

  `JSSpec` loads a spec file and reads out the instructions about which objects
  to instantiate and how to hook up their relationships.

  Specs are really just special dictionaries, and any `JSObject` can implement
  an `initWithSpec` method that extracts information from arbitrary properties.

  The underlying languages of spec files is YAML, but the property names and
  values are all defined by the classes in `JSKit` and the classes you create.

  For example, to create a simple view controller with a view and a button
  that says test, a spec might look like:

  ````
  File's Owner: /ViewController

  ViewController:
    class: TestButtonViewController
    view: /View
    outlets:
      testButton: /Button

  View:
    subviews:
      - /Button

  Button:
    class: UIButton
    title: Test
    action: runTest
    target: /ViewController
  ````
topics:
  -
    name: Loading a Spec File
    members:
      -
        name: initWithResource
        kind: init
        summary: Load a spec file resource from a bundle
        arguments:
          -
            name: resource
            type: String
            summary: The name of the spec file in the bundle, excluding any
              \`.spec.yaml` extension
          -
            name: bundle
            type: JSBundle
            default: JSBundle.mainBundle
            summary: The optional bundle to load from.  Will default to the main
              application bundle if not specified.
  -
    name: Getting Objects
    members:
      -
        name: filesOwner
        type: JSObject
        summary: Instantiate the object referened by the `File's Owner` key.
        description: |
          Every spec file defines an object graph, and there must be a starting
          point, an object that is at the root of the graph.

          In spec files, that root is always the value of a key named
          `File's Owner`.

          This property looks up that key and instantiates the entire graph,
          returning the root object.
      -
        name: valueForKey
        kind: method
        type: any
        return: If the key resolves to a scalar value like a number or a string,
          that value is returned.  If the key resolves to a `JSObject` instance,
          that value is returned.  If the key resolves to an array or dictionary
          a new `JSSpec` is returned scoped to that value.
        summary: Get a value for the given key from the spec
        description: |
          Values in spec files can be simple things like strings or numbers,
          or they can have special meaning.

          - `String` beginning with `/` - Named reference to a top level
            object in the spec file
          - `String` beginning with `$` - Global Javascript variable (can
            include `.` to specify nested properties)
          - `String` beginning with `.` - Localized string table key
          - `Object` of any kind could be turned into a `JSObject` via
             `initWithSpec`.
        note: This method is typically only called from within `initWithSpec`
          to populate instance properties from spec values.
        arguments:
          -
            name: key
            type: String
            summary: The name of the value to lookup
      -
        name: valueForKey
        kind: method
        suffix: class
        type: any
        return: If the key resolves to a `JSObject` instance,
          that value is returned.  If the key resolves to an array or dictionary
          a new `JSSpec` is returned scoped to that value.  If the key resolves
          to a number or a string, a `JSSpec` is returned with either
          \`numberValue` or \`stringValue` populated.
        summary: Get a value for the given key from the spec, using the type
          as a default class to instantiate
        description: |
          A default class allows for simpler spec files when the type of a
          property is never in question.

          For example, a `UIView` knows that its
          `backgroundColor`(UIView.backgroundColor) is always
          a `JSColor`, so it calls this method during its `initWithSpec()`
          process.

          Because it does so, in the spec file, a `class: JSColor` line is not
          necessary when specifying a view's
          `backgroundColor`(UIView.backgroundColor).
        note: This method is typically only called from within `initWithSpec`
          to populate instance properties from spec values.
        arguments:
          -
            name: key
            type: String
            summary: The name of the value to lookup
          -
            name: type
            type: JSClass
            summary: The class to use as a default when instantiating objects
      -
        name: valueForKey
        kind: method
        suffix: enum
        type: any
        summary: Get a value for the given key from the spec, using the enum
          as a lookup table for named options
        description: |
          When specifying enum values in spec files, it's handy to simply use
          the name of an option.

          You can use this method during `initWithSpec()` to match a name from
          spec file to an option on the enum.
        note: This method is typically only called from within `initWithSpec`
          to populate instance properties from spec values.
        arguments:
          -
            name: key
            type: String
            summary: The name of the value to lookup
          -
            name: enum
            type: Enum
            summary: The enum object to use as a option name lookup table
  -
    name: Scalar Values
    members:
      -
        name: stringValue
        type: String
        nullable: true
        summary: The string value that was found when an object was requested
        description: |
          A spec with such a value may be passed to `initWithSpec()` when a
          specific class was requested.  This gives the class a chance to
          create an instance from the string.

          For example, if `JSImage` receives a spec with a `stringValue`, it
          uses that string as an image resource name, which is all that is
          required to create an image.

          This allows spec files to be more concise for objects that be created
          by a single scalar.
      -
        name: numberValue
        type: String
        nullable: true
        summary: The number value that was found when an object was requested
        description: |
          A spec with such a value may be passed to `initWithSpec()` when a
          specific class was requested.  This gives the class a chance to
          create an instance from the number.

          For example, if `JSSize` receives a spec with a `numberValue`, it
          creates a square size using that number.

          This allows spec files to be more concise for objects that be created
          by a single scalar.
  -
    name: Array Values
    members:
      -
        name: length
        type: Number
        summary: The number of items in this array
        description: |
          When you do a `valueForKey()` on a property that is an array in the
          spec file, you get a `JSSpec` back.

          An array-spec has this length property, allowing you to iterate.

          Simply use an index value as the key in `valueForKey()`.

          ````
          var items = spec.valueForKey('items');
          for (var i = 0, l = items.length; i < l; ++i){
            var item = items.valueForKey(i);
          }
          ````