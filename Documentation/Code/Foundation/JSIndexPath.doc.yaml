copyright: Copyright Â© 2020 Breakside Inc.
kind: class
introduced: "1.0.0"
summary: An n-dimensional index, useful for things like nested lists
description: |
  An index path specifies a location in a nested set of a arrays.

  For example, `UIListView` displays rows that are grouepd
  into sections.  A `JSIndexPath` can reference a particular row by specifying
  the top level `section` and `row` within the section.
topics:
  -
    name: Creating an IndexPath
    members:
      -
        kind: constructor
        summary: Create a two-dimensional index path with the given section and row components
        description: |
          Since a two-dimensional list is common in UI components, such as
          `UIListView`, we have a special constructor that takes just two
          index components.
        arguments:
          -
            name: section
            type: int
            summary: The top level section index
          -
            name: row
            type: int
            summary: The row index within the section
      -
        kind: constructor
        prefix: array
        summary: Create an index path of arbirary dimension with the given components
        arguments:
          -
            name: components
            type: int[]
            summary: The index components for this index path
      -
        kind: constructor
        prefix: copy
        summary: Copy an index path
        arguments:
          -
            name: indexPath
            type: JSIndexPath
            summary: The index path to copy
  -
    name: Index values
    members:
      -
        name: section
        type: int
        summary: The top level section index for this index path
        description: |
          Eqivalent to `this[0]`.

          Common UI components such as `UIListView` make heavy use of two-dimensional
          lists, so it can be convenient to have a special named property here on
          `JSIndexPath` to access the first index component.
      -
        name: row
        type: int
        summary: The row index within the section for this index path
        description: |
          Eqivalent to `this[1]`.

          Common UI components such as `UIListView` make heavy use of two-dimensional
          lists, so it can be convenient to have a special named property here on
          `JSIndexPath` to access the second index component.
      -
        name: "[n]"
        type: int
        summary: The `n`th level index in this index path
        description: |
          While we have special property names like `section` and `row` for
          the first two indexes, all others must be accessed via a subscript
          operation, where `n` is the desired level.
        note: |
          * `0` is the first level, equivalent to the `section` property
          * `1` is the second level, equivalent to the `row` property
          * `2` is the third level, and is the first level after `row`
  -
    name: Comparisons
    members:
      -
        name: isEqual
        kind: method
        summary: Check if this index path is equal to another
        description: |
          Two index paths are equal if they have the same number of components
          and all components are equal
        return: \`true` if the index path's properties match ours, `false` otherwise
        type: bool
        arguments:
          -
            name: otherIndexPath
            type: JSIndexPath
            summary: The index path to compare to
      -
        name: isLessThan
        kind: method
        summary: Check if this index path is less than another index path
        description: |
          For example, a two-dimensional index path is less than another if its
          `section` is less than the other's `section`, or if the two sections
          are equal and its `row` is less than the other's `row`
        return: \`true` if this index path is less than the other, `false` otherwise
        type: bool
        arguments:
          -
            name: otherIndexPath
            type: JSIndexPath
            summary: The index path to compare to
      -
        name: isLessThanOrEqual
        kind: method
        summary: Check if this index path is less than or equal to another index path
        description: |
          For example, a two-dimensional index path is less than another if its
          `section` is less than the other's `section`, or if the two sections
          are equal and its `row` is less than or equal to the other's `row`
        return: \`true` if this index path is less than or equal to the other, `false` otherwise
        type: bool
        arguments:
          -
            name: otherIndexPath
            type: JSIndexPath
            summary: The index path to compare to
      -
        name: isGreaterThan
        kind: method
        summary: Check if this index path is greater than another index path
        description: |
          For example, a two-dimensional index path is greater than another if its
          `section` is greater than the other's `section`, or if the two sections
          are equal and its `row` is greater than the other's `row`
        return: \`true` if this index path is greater than the other, `false` otherwise
        type: bool
        arguments:
          -
            name: otherIndexPath
            type: JSIndexPath
            summary: The index path to compare to
      -
        name: isGreaterThanOrEqual
        kind: method
        summary: Check if this index path is greater than or equal to another index path
        description: |
          For example, a two-dimensional index path is greater than another if its
          `section` is greater than the other's `section`, or if the two sections
          are equal and its `row` is greater than or equal to the other's `row`
        return: \`true` if this index path is greater than or equal to the other, `false` otherwise
        type: bool
        arguments:
          -
            name: otherIndexPath
            type: JSIndexPath
            summary: The index path to compare to     
      -
        name: compare
        kind: method
        summary: Return a `sort()`-compatible comparison result between this index path and another
        description: |
          While the same information can be obtained by calling `isLessThan()`,
          `isGreaterThan()`, and `isEqual()`, this `compare()` function is designed
          to be used with a `sort()` function that expects a negative, positive, or zero
          return value.
        return: \`-1` if this index path is less than the other, `1` if this index path is greater, or `0` if the two index paths are equal
        type: int
        arguments:
          -
            name: otherIndexPath
            type: JSIndexPath
            summary: The index path to compare to
      -
        name: incremented
        kind: method
        summary: Return a new index path with the final component incremented by one
        note: |
          This kind of simple incrementing is of limited use without instructions
          on when the final component should rollover to `0` and the previous component
          should be incremented, like when incrementing from the final row in a section
          to the first row of the next section.  Such instructions are specific to the
          caller and cannot be easily baked into `JSIndexPath`.
        return: A new index path with a final component that is one greater than this index path
        type: JSIndexPath
      -
        name: decremented
        kind: method
        summary: Return a new index path with the final component decremented by one
        description: |
          Subtracts one from the final component of the index path, possibly resulting in `-1`
          if the final component is `0`.
        note: |
          This kind of simple decremeting is of limited use without instructions
          on what to do when the final component is 0.  While it's obvious that the
          previous component should be decremented, it's not obvious what value the
          final component should have.  Such instructions are specific to the
          caller and cannot be easily baked into `JSIndexPath`.
        return: A new index path with a final compnent one less than this index path
        type: JSIndexPath
