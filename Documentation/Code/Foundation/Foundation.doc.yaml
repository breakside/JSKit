copyright: Copyright Â© 2020 Breakside Inc.
introduced: 2020.1.0
kind: framework
summary: The base functionality for any kind of of JSKit-based application
description: |
  Foundation starts with a JavaScript class model and builds on that to provide
  core functionality required by most applications.

  The goal is to provide a framework that has all the basics without adding too
  many frills.
topics:
  - 
    name: Class Model
    summary: The most basic building blocks for JSKit-based applications
    members:
      - JSClass
      - JSObject
      - JSProtocol
      - JSCustomProperty
      - JSDynamicProperty
      - JSReadOnlyProperty
      - JSLazyInitProperty
  - 
    name: Strings & Data
    summary: Dealing with strings, bytes, attributed strings, unicode, and encodings
    members:
      - String
      - JSAttributedString
      - JSData
      - UnicodeChar
      - UnicodeIterator
      - UserPerceivedCharacterIterator
  - 
    name: Date & Time
    summary: Date & Time, including calendar, time zone, and localization
    members:
      - JSDate
      - JSDateFormatter
      - JSCalendar
      - JSLocale
      - JSTimeZone
  -
    name: Indexes and Lookup
    summary: Simple types for specifying locations and selections in one- and two-dimensional lists
    members:
      - JSRange
      - JSIndexPath
      #- JSIndexPathRange
      #- JSIndexPathSet
      #- JSIndexRange
      - JSIndexSet
  -
    name: Drawing & Images
    summary: Basic kinds for use in coordinate systems such as points, rects, etc.
    members:
      - JSContext
      - JSPoint
      - JSSize
      - JSRect
      - JSInsets
      - JSAffineTransform
      - JSColor
      #- JSCubicBezier
      - JSGradient
      - JSImage
  # -
  #   name: Filesystem
  #   summary: Files and file system operations
  #   members:
  #     - JSFileManager
  #     - JSFile
  -
    name: Application
    summary: Common functionality shared across GUI and command line applications
    members:
      - JSBundle
      - JSSpec
      - JSUserDefaults
      - JSArguments
      - JSRunLoop
      - JSUndoManager
  -
    name: Logging
    summary: Logging, telemetry, and error reporting
    members:
      - JSLog
      # - CustomLogHandlers
  -
    name: Web Requests
    summary: Making web requests and handling common data kinds
    members:
      - JSURL
      - JSURLSession
      - JSURLSessionTask
      - JSURLSessionDataTask
      - JSURLSessionStreamTask
      - JSURLSessionUploadTask
      - JSURLRequest
      - JSURLResponse
      - JSFormFieldMap
      - JSFormField
      - JSMediaType
      - JSMIMEHeader
      - JSMIMEHeaderMap
  -
    name: Text & Typesetting
    summary: Text layout & font management
    members:
      - JSFont
      - JSFontDescriptor
      # - JSTextAttachment
      # - JSTextContainer
      # - JSTextFrame
      # - JSTextFramesetter
      # - JSTextLayoutManager
      # - JSTextLine
      # - JSTextRun
      # - JSTextStorage
      # - JSTextTypesetter
      -
        name: JSTextAlignment
        kind: enum
        summary: Text alignment options
        topics:
          -
            name: Options
            members:
              -
                name: left
                summary: Left-justify text
              -
                name: center
                summary: Center text
              -
                name: right
                summary: Right-justify text
      -
        name: JSLineBreakMode
        kind: enum
        summary: Line break strategies
        topics:
          -
            name: Options
            members:
              -
                name: truncateTail
                summary: No line breaks.  Truncate the line and and ellipses if
                  necessary.
              -
                name: wordWrap
                summary: Break lines at word boundaries
              -
                name: characterWrap
                summary: Break lines at any character
  # - 
  #   name: Zlib
  #   summary: Data compression with zlib
  #   members:
  #     - Zlib
  #     - Deflate
  -
    name: Utilities
    summary: Miscellaneous utilities such as timers and formatters
    members:
      -
        name: JSMD5Hash
        kind: function
        introduced: 2020.1.0
        type: JSData
        return: A 16-byte (128 bit) hash of the input data
        summary: Hash the given data using the MD5 algorithm
        arguments:
          -
            name: data
            type: JSData
            summary: The data to hash
        description: |
          If you have several chunks of data to hash, use the `class`() variant
          of `JSMD5Hash`(JSMD5Hash-class).

          Compared to the `SecurityKit` framework, this hash function here can be called
          without an asynchronous interface.  However, the MD5 algorithm is
          not considered secure.

          This `JSMD5Hash` function should only be used for identity hashing and checking,
          which is often a convenient way to create `id` values for objects, but does
          not require security.

          For example, when a `UIApplication` is created for the web, a bundle of
          resources (like images) is created and each resource is given a filename based
          on the `SHA1` hash of its contents.  This ensures unique names for each
          resource, and provides easy cache-busting if a resource changes.  At no point
          are the resource names required for security.
        important: |
          If you are hashing data for secure purposes, then use the `SECHash`
          class from the `SecurityKit` framework.  The `MD5` hash function
          is not secure.
        note: |
          You can call `hexStringRepresentation()` on the result to generate
          a string form of the MD5 hash.
      - JSMD5Hash
      -
        name: JSSHA1Hash
        kind: function
        introduced: 2020.1.0
        type: JSData
        return: A 20-byte (160 bit) hash of the input data
        summary: Hash the given data using the SHA1 algorithm
        arguments:
          -
            name: data
            type: JSData
            summary: The data to hash
        description: |
          If you have several chunks of data to hash, use the `class`() variant
          of `JSSHA1Hash`(JSSHA1Hash-class).

          Compared to the `SecurityKit` framework, this hash function here can be called
          without an asynchronous interface.  However, the SHA1 algorithm is
          not considered secure.

          This `JSSHA1Hash` function should only be used for identity hashing and checking,
          which is often a convenient way to create `id` values for objects, but does
          not require security.

          For example, when a `UIApplication` is created for the web, a bundle of
          resources (like images) is created and each resource is given a filename based
          on the `SHA1` hash of its contents.  This ensures unique names for each
          resource, and provides easy cache-busting if a resource changes.  At no point
          are the resource names required for security.
        important: |
          If you are hashing data for secure purposes, then use the `SECHash`
          class from the `SecurityKit` framework.  The `SHA1` hash function
          is not secure.
        note: |
          You can call `hexStringRepresentation()` on the result to generate
          a string form of the SHA1 hash.
      - JSSHA1Hash
      - JSGlobalObject
      - JSTimer
      - JSNumberFormatter
      # - JSBinarySearcher
      # - JSValueTransformer
      # - JSMath
      - UUID
      - JSCopy
      - JSDeepCopy
      # - JSResolveDottedName
      # - JSSetDottedName