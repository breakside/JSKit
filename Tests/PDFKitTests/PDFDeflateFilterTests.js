// Copyright 2020 Breakside Inc.
//
// Licensed under the Breakside Public License, Version 1.0 (the "License");
// you may not use this file except in compliance with the License.
// If a copy of the License was not distributed with this file, you may
// obtain a copy at
//
//     http://breakside.io/licenses/LICENSE-1.0.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// #import PDFKit
// #import TestKit
'use strict';

JSClass("PDFDeflateFilterTests", TKTestSuite, {

    testDecode: function(){
        var data = "eAF9kM9OxCAQxu99is+be+kCdmF79V9ivOwmJJ6xpVtW2rVA1viyPotAqwc1ZkiYDPPN/D4m7DGBxOCUQdQMTuMJI9Y3nqLxoDl8EzvS6/DdZ3NGYLPaFj26PItvS1FzJiAYKlGVFREb8A0tGbkSP6enxQRx+hTXpJQmmaC0aAZcS9ClOl9ywFrKRCQ7XMreeMSjELQP2N3e48NqHPSonQq6xfM7duqgfbkq5DEp2aK8WCEW7mTkjTZZsvkbgtc1ZoivxvQfxd/EfCuW5v+IH0LiNWPQYxv5wglnZU0bYRF6nRw8moCjOivfOPMa0Dk16LeTe5ktZJD9J9vPbN0=".dataByDecodingBase64();
        var filter = PDFDeflateFilter.init();
        var decoded = filter.decode(data);
        var expected = [
        'q Q q 0 0 612 792 re W n /Cs1 cs 1 1 1 sc 0 792 m 612 792 l 612 0 l 0 0 l',
        'h f Q q 68.79627 72 474.4075 651.2037 re W n /Cs1 cs 0 0 0 sc q 1 0 0 1 72 711',
        'cm BT 11 0 0 11 0 0 Tm /TT1 1 Tf (This is a test PDF \xdele generated by Pages.)',
        'Tj /TT2 1 Tf (!) Tj ET Q /Cs2 cs 0 sc q 1 0 0 1 72 699 cm BT ET Q /Cs1 cs',
        '0 0 0 sc q 1 0 0 1 72 687 cm BT 11 0 0 11 0 0 Tm /TT1 1 Tf (It is intended to validate the PDFKit javascript framework.)',
        'Tj ET Q Q'
        ].join('\n').latin1();
        TKAssertObjectEquals(decoded, expected);
    },

    testPredictor10: function(){
        var compressed = "eJxjSExKTklNY0jPyMzKzmHIzcsvKCxiKC4pLSuvAACJUgot".dataByDecodingBase64();
        var expected = "abcdefghijklmnopqrstuvwx".latin1();
        var params = {
            Columns: 6,
            Predictor: 10
        };
        var filter = PDFDeflateFilter.initWithParametersDictionary(params);
        var uncompressed = filter.decode(compressed);
        TKAssertObjectEquals(uncompressed, expected);
    },

    testPredictor11: function(){
        var compressed = "eJxjTGQEgyQGEGBMZmBkYmYBAA+IATk=".dataByDecodingBase64();
        var expected = "abcdefbbbbbbccdfim".latin1();
        var params = {
            Columns: 6,
            Predictor: 11
        };
        var filter = PDFDeflateFilter.initWithParametersDictionary(params);
        var uncompressed = filter.decode(compressed);
        TKAssertObjectEquals(uncompressed, expected);
    },

    testPredictor12: function(){
        var expectation = TKExpectation.init();
        expectation.call(this.getResourceData, this, "xref", "z", function(compressed){
            expectation.call(this.getResourceData, this, "xref", "dat", function(expected){
                var params = {
                    Columns: 6,
                    Predictor: 12
                };
                var filter = PDFDeflateFilter.initWithParametersDictionary(params);
                var uncompressed = filter.decode(compressed);
                TKAssertObjectEquals(uncompressed, expected);
            }, this);
        }, this);
        this.wait(expectation, 2);
    }

    // TODO: test other predictors
    // TODO: test png predictors with various bitsPerComponent and colorSamples
});